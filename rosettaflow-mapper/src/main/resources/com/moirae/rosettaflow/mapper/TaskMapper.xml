<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moirae.rosettaflow.mapper.TaskMapper">
    <resultMap id="BaseResultMap" type="com.moirae.rosettaflow.mapper.domain.Task">
        <id column="id" jdbcType="VARCHAR" property="id" />
        <result column="task_name" jdbcType="VARCHAR" property="taskName" />
        <result column="user_id" jdbcType="VARCHAR" property="userId" />
        <result column="user_type" jdbcType="INTEGER" property="userType" />
        <result column="required_memory" jdbcType="BIGINT" property="requiredMemory" />
        <result column="required_core" jdbcType="INTEGER" property="requiredCore" />
        <result column="required_bandwidth" jdbcType="BIGINT" property="requiredBandwidth" />
        <result column="required_duration" jdbcType="BIGINT" property="requiredDuration" />
        <result column="owner_identity_id" jdbcType="VARCHAR" property="ownerIdentityId" />
        <result column="owner_party_id" jdbcType="VARCHAR" property="ownerPartyId" />
        <result column="create_at" jdbcType="TIMESTAMP" property="createAt" />
        <result column="start_at" jdbcType="TIMESTAMP" property="startAt" />
        <result column="end_at" jdbcType="TIMESTAMP" property="endAt" />
        <result column="used_memory" jdbcType="BIGINT" property="usedMemory" />
        <result column="used_core" jdbcType="INTEGER" property="usedCore" />
        <result column="used_bandwidth" jdbcType="BIGINT" property="usedBandwidth" />
        <result column="used_file_size" jdbcType="BIGINT" property="usedFileSize" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="status_desc" jdbcType="VARCHAR" property="statusDesc" />
        <result column="remarks" jdbcType="VARCHAR" property="remarks" />
        <result column="task_sign" jdbcType="VARCHAR" property="taskSign" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </resultMap>
    <sql id="Base_Column_List">
        id, task_name, user_id, user_type, required_memory, required_core, required_bandwidth,
    required_duration, owner_identity_id, owner_party_id, create_at, start_at, end_at,
    used_memory, used_core, used_bandwidth, used_file_size, `status`, status_desc, remarks,
    task_sign, create_time, update_time
    </sql>
    <select id="getOrgTaskListByIdentityId" resultType="com.moirae.rosettaflow.mapper.domain.Task">
        select t.id,
               t.task_name,
               t.create_at,
               t.start_at,
               t.end_at,
               t.status,
               if(temp.taskSponsor > 0, 1 , 0) as isTaskSponsor,
               if(temp.powerProvider > 0, 1 , 0) as isPowerProvider,
               if(temp.dataProvider > 0, 1 , 0) as isDataProvider,
               if(temp.resultConsumer > 0, 1 , 0) as isResultReceiver,
               if(temp.algoProvider > 0, 1 , 0) as isAlgoProvider
        from dc_task t
        join
             (
                 select tmp.task_id,
                        sum(tmp.taskSponsor) as taskSponsor,
                        sum(tmp.powerProvider) as powerProvider ,
                        sum(tmp.dataProvider) as dataProvider,
                        sum(tmp.resultConsumer) as resultConsumer,
                        sum(tmp.algoProvider) as algoProvider
                 from
                     (
                         select tk.owner_identity_id as identity_id,
                                tk.id as task_id,
                                true taskSponsor,
                                false as powerProvider,
                                false as dataProvider,
                                false as resultConsumer,
                                false algoProvider
                         from dc_task tk
                         where tk.owner_identity_id = #{identityId,jdbcType=VARCHAR}

                         union

                         select tap.identity_id,
                                tap.task_id,
                                false taskSponsor,
                                false as powerProvider,
                                false as dataProvider,
                                false as resultConsumer,
                                true algoProvider
                         from dc_task_algo_provider tap
                         where tap.identity_id = #{identityId,jdbcType=VARCHAR}

                         union

                         select tpp.identity_id,
                                tpp.task_id,
                                false taskSponsor,
                                true as powerProvider,
                                false as dataProvider,
                                false as resultConsumer,
                                false algoProvider
                         from dc_task_power_provider tpp
                         WHERE tpp.identity_id= #{identityId,jdbcType=VARCHAR}

                         union

                         select tmd.identity_id,
                                tmd.task_id,
                                false taskSponsor,
                                false as powerProvider,
                                true as dataProvider,
                                false as resultConsumer,
                                false algoProvider
                         from dc_task_data_provider tmd
                         where tmd.identity_id= #{identityId,jdbcType=VARCHAR}


                         union

                         select distinct trc.consumer_identity_id as identity_id,
                                         trc.task_id,
                                         false taskSponsor,
                                         false as powerProvider,
                                         false as dataProvider,
                                         true as resultConsumer,
                                         false algoProvider
                         from dc_task_result_consumer trc
                         where trc.consumer_identity_id = #{identityId,jdbcType=VARCHAR}

                     ) tmp
                 group by tmp.task_id
             ) temp on t.id = temp.task_id
        order by t.create_at desc


    </select>
    <select id="getTaskListOfEventNotSynced" resultType="com.moirae.rosettaflow.mapper.domain.Task">
        select
            t.*
        from dc_task t left join mo_task_expand te on t.id = te.id
        where (isnull(te.event_synced) or te.event_synced = 0 ) and t.status in (3,4)
        limit 1000
    </select>
    <select id="getTaskOfUnSyncedEvent" resultType="com.moirae.rosettaflow.mapper.domain.Task">
        select
            t.*
        from dc_task t inner join mo_task_expand te on t.id = te.id
        where t.id = #{taskId,jdbcType=VARCHAR} and te.event_synced = 1
    </select>
</mapper>

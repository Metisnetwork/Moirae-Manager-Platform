syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.platon.rosettaflow.grpc.service";
package rpcapi;


import "lib/api/common_message.proto";
import "lib/api/task_rpc_api.proto";
import "google/api/annotations.proto";

//  ------------------------  power  ------------------------



// 单个算力详情
message PowerSingleDetail {
    ResourceUsedDetail     information = 1;                      // 算力实况
    string                 job_node_id = 2;                      // 计算服务id (节点内部的)
    string                 power_id = 3;                         // 算力id
    uint32                 total_task_count = 4;                 // 算力上总共执行的任务数 (已完成的和正在执行的)
    uint32                 current_task_count = 5;               // 算力上正在执行的任务数
    repeated PowerTask     tasks = 6;                            // 算力上正在执行的任务详情信息
    string                 state = 7;                            // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
}

//  总算力详情
message PowerTotalDetail {
    ResourceUsedDetail     information = 1;                 // 算力实况
    uint32                 total_task_count = 2;            // 算力上总共执行的任务数 (已完成的和正在执行的)
    uint32                 current_task_count = 3;          // 算力上正在执行的任务数
    repeated PowerTask     tasks = 4;                       // 算力上正在执行的任务详情信息
    string                 state = 5;                       // 算力状态 (create: 还未发布的算力; release: 已发布的算力; revoke: 已撤销的算力)
}


// 算力上的任务信息
message PowerTask {
    string                            task_id = 1;              // 任务Id
    string                            task_name = 2;            // 任务名称
    OrganizationIdentityInfo          owner = 3;                // 任务发起方身份信息
    repeated OrganizationIdentityInfo patners = 4;              // 任务协作方信息
    repeated OrganizationIdentityInfo receivers = 5;            // 任务结果接收方信息
    TaskOperationCostDeclare          operation_cost = 6;       // 任务所需的资源大小信息
    TaskOperationCostDeclare          operation_spend = 7;      // 任务已经花费的资源大小信息
    uint64                            createAt = 8;             // 任务的发起时间
}




message GetPowerTotalDetailResponse {
    OrganizationIdentityInfo owner = 1;                  // 算力拥有者信息
    PowerTotalDetail         power = 2;                  // 算力总详细
}
message GetPowerTotalDetailListResponse {
    int32                                status = 1;                         // 响应码
    string                               msg = 2;
    repeated GetPowerTotalDetailResponse power_list = 3;  // 全网的算力总详情列表
}

// 底层自己会拿到算力
message PublishPowerRequest {
    string job_node_id = 1;     // 计算服务id (节点内部的)
}

message GetPowerSingleDetailResponse {
    OrganizationIdentityInfo owner = 1;                  // 算力拥有者信息
    PowerSingleDetail        power = 2;                  // 算力单个摘要
}
message GetPowerSingleDetailListResponse {
    int32                                 status = 1;                         // 响应码
    string                                msg = 2;
    repeated GetPowerSingleDetailResponse power_list = 3;  // 单个节点的算力总摘要列表
}

message PublishPowerResponse {
    int32  status = 1;                         // 响应码
    string msg = 2;                            // 错误信息
    string power_id = 3;                       // 算力id
}

message RevokePowerRequest {
    string power_id = 1;        // 算力id
}

// ## 算力 相关接口
///           【注意】 算力和元数据 不一样, 对外面人来说, 算力只需要知道总的, 而元数据则需要知道单个单个的;
//                    对自己来说, 算力和元数据都需要知道单个单个的.
service PowerService {

    // 查看各个节点的总算力详情列表
    rpc GetPowerTotalDetailList (EmptyGetParams) returns (GetPowerTotalDetailListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/power/totalList"
            body: "*"
        };
    }
    // 查看某个节点各个单算力详情列表
    rpc GetPowerSingleDetailList (EmptyGetParams) returns (GetPowerSingleDetailListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/power/singleList"
            body: "*"
        };
    }

    // 启用算力 (发布算力)
    rpc PublishPower (PublishPowerRequest) returns (PublishPowerResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/power/publish"
            body: "*"
        };
    }
    // 停用算力 (撤销算力)
    rpc RevokePower (RevokePowerRequest) returns (SimpleResponseCode) {
        option (google.api.http) = {
            post: "/carrier/v1/power/revoke"
            body: "*"
        };
    }
}

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.platon.rosettaflow.grpc.service";
package rpcapi;

import "lib/api/common_message.proto";
import "google/api/annotations.proto";

//  ------------------------  auth  ------------------------


message ApplyIdentityJoinRequest {
    OrganizationIdentityInfo member = 1;           // 申请准入身份
}

message GetNodeIdentityResponse {
    int32                    status = 1;                       // 响应码
    string                   msg = 2;                          // 错误信息
    OrganizationIdentityInfo owner = 3;                        // 自己身份信息
}

message GetIdentityListResponse {
    int32                             status = 1;                       // 响应码
    string                            msg = 2;                          // 错误信息
    repeated OrganizationIdentityInfo member_list = 3;                  // 全网身份信息列表
}

// 元数据的使用方式类型枚举
enum MetaDataUsageType {
    Usage_Unknown = 0;  // 未定义类型
    Period = 1;         // 依照时间段来使用
    Times = 2;          // 依照次数来使用
}

// 元数据的使用方式定义
message MetaDataUsage {
    MetaDataUsageType                       usage_type = 1;              // 元数据的使用方式 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
    optional uint64                         start_at = 2;                // 使用开始时间 (当 usage_type 为 1 时才需要的字段)
    optional uint64                         end_at = 3;                  // 使用结束时间 (当 usage_type 为 1 时才需要的字段)
    optional uint32                         times = 4;                   // 使用次数 (当 usage_type 为 2 时才需要的字段)
}
// 元数据使用授权
message MetaDataAuthority {
    OrganizationIdentityInfo              owner = 1;                   // 元数据所属的组织信息
    string                                meta_data_id = 2;            // 元数据Id
    MetaDataUsage                         usage = 3;                   // 元数据怎么使用
}
// 用户对元数据使用授权申请req
message ApplyMetaDataAuthorityRequest {
    string                                user = 1;                            // 发起任务的用户的信息 (task是属于用户的)
    UserType                              user_type = 2;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    MetaDataAuthority                     auth = 3;                            // 元数据使用授权信息
    bytes                                 sign = 4;                            // 发起数据授权申请的账户的签名
}
// 用户对元数据使用授权申请resp
message ApplyMetaDataAuthorityResponse {
    int32                             status = 1;                       // 响应码
    string                            msg = 2;                          // 错误信息
    string                            meta_data_auth_id = 3;            // 元数据授权申请Id
}

enum AuditMetaDataOption {
    Audit_Pending = 0;          // 等待审核中
    Audit_Passed = 1;           // 审核通过
    Audit_Refused = 2;          // 审核拒绝
}

message AuditMetaDataAuthorityRequest {
    string                          meta_data_auth_id = 1;                  // 元数据授权申请Id
    AuditMetaDataOption             audit = 2;                              // 审核结果
}

message GetMetaDataAuthority {
    string                                meta_data_auth_id = 1;               // 元数据授权申请Id
    string                                user = 2;                            // 发起任务的用户的信息 (task是属于用户的)
    UserType                              user_type = 3;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    MetaDataAuthority                     auth = 4;                            // 元数据使用授权信息
    AuditMetaDataOption                   audit = 5;                           // 审核结果
    uint64                                apply_at = 6;                        // 发起授权申请的时间 (单位: ms)
    uint64                                audit_at = 7;                        // 审核授权申请的时间 (单位: ms)
}

message GetMetaDataAuthorityListResponse {
    int32                             status = 1;                       // 响应码
    string                            msg = 2;                          // 错误信息
    repeated  GetMetaDataAuthority    list = 3;                         // 数据授权信息列表
}

service AuthService {

    // 数据授权申请
    rpc ApplyMetaDataAuthority(ApplyMetaDataAuthorityRequest) returns (ApplyMetaDataAuthorityResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/applyMetaDataAuth"
            body: "*"
        };
    }

    // 数据授权审核
    rpc AuditMetaDataAuthority(AuditMetaDataAuthorityRequest) returns (SimpleResponseCode) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/auditMetaDataAuth"
            body: "*"
        };
    }

    // 获取数据授权申请列表
    rpc GetMetaDataAuthorityList(EmptyGetParams) returns (GetMetaDataAuthorityListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/metaDataAuthList"
            body: "*"
        };
    }

    //

    // 申请准入网络
    rpc ApplyIdentityJoin (ApplyIdentityJoinRequest) returns (SimpleResponseCode) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/applyIdentity"
            body: "*"
        };
    }

    // 注销准入网络
    rpc RevokeIdentityJoin (EmptyGetParams) returns (SimpleResponseCode) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/revokeIdentity"
            body: "*"
        };
    }
    // 查询自己组织的identity信息
    rpc GetNodeIdentity (EmptyGetParams)returns (GetNodeIdentityResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/getIdentity"
            body: "*"
        };
    }

    // 查询全网全部已发布的 身份信息
    rpc GetIdentityList (EmptyGetParams) returns (GetIdentityListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/identityList"
            body: "*"
        };
    }
}

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.platon.rosettaflow.grpc.service";
package rpcapi;

import "lib/common/base.proto";
import "lib/types/metadata.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

//  ------------------------  auth  ------------------------

// 组织身份入网申请 req
message ApplyIdentityJoinRequest {
    api.protobuf.Organization member = 1;           // 申请准入身份
}
// 查询自己组织的identity信息 resp
message GetNodeIdentityResponse {
    int32                     status = 1;                       // 响应码
    string                    msg = 2;                          // 错误信息
    api.protobuf.Organization owner = 3;                        // 自己身份信息
}

// 查询全网组织的身份信息列表(已入网的) resp
message GetIdentityListResponse {
    int32                              status = 1;                       // 响应码
    string                             msg = 2;                          // 错误信息
    repeated api.protobuf.Organization member_list = 3;                  // 全网身份信息列表
}

// 用户对元数据使用授权申请 req
message ApplyMetaDataAuthorityRequest {
    string                  user = 1;                            // 发起任务的用户的信息 (task是属于用户的)
    api.protobuf.UserType   user_type = 2;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    types.MetaDataAuthority auth = 3;                            // 元数据使用授权信息
    bytes                   sign = 4;                            // 发起数据授权申请的账户的签名
}
// 用户对元数据使用授权申请 resp
message ApplyMetaDataAuthorityResponse {
    int32  status = 1;                       // 响应码
    string msg = 2;                          // 错误信息
    string meta_data_auth_id = 3;            // 元数据授权申请Id
}

// 组织对用户的数据授权申请做审核 req
message AuditMetaDataAuthorityRequest {
    string                    meta_data_auth_id = 1;                  // 元数据授权申请Id
    api.protobuf.AuditMetaDataOption audit = 2;                       // 审核意见
}
// 组织对用户的数据授权申请做审核 resp
message AuditMetaDataAuthorityResponse {
    // the code for response
    int32 status = 1;
    // the message for response
    string msg = 2;
    api.protobuf.AuditMetaDataOption audit = 3;                              // 审核结果 (回显)
}

// 当前组织的某个用户对单个元数据的授权申请及审核结果详情
message GetMetaDataAuthority {
    string                    meta_data_auth_id = 1;               // 元数据授权申请Id
    string                    user = 2;                            // 发起任务的用户的信息 (task是属于用户的)
    api.protobuf.UserType     user_type = 3;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    types.MetaDataAuthority   auth = 4;                            // 元数据使用授权信息
    api.protobuf.AuditMetaDataOption audit = 5;                    // 审核结果
    uint64                    apply_at = 6;                        // 发起授权申请的时间 (单位: ms)
    uint64                    audit_at = 7;                        // 审核授权申请的时间 (单位: ms)
}
// 当前组织的所有元数据的授权申请及审核结果详情列表 resp
message GetMetaDataAuthorityListResponse {
    int32                         status = 1;                       // 响应码
    string                        msg = 2;                          // 错误信息
    repeated GetMetaDataAuthority list = 3;                         // 数据授权信息列表
}

service AuthService {

    // 数据授权申请
    rpc ApplyMetaDataAuthority(ApplyMetaDataAuthorityRequest) returns (ApplyMetaDataAuthorityResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/applyMetaDataAuth"
            body: "*"
        };
    }

    // 数据授权审核
    rpc AuditMetaDataAuthority(AuditMetaDataAuthorityRequest) returns (AuditMetaDataAuthorityResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/auditMetaDataAuth"
            body: "*"
        };
    }

    // 获取数据授权申请列表
    rpc GetMetaDataAuthorityList(google.protobuf.Empty) returns (GetMetaDataAuthorityListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/metaDataAuthList"
            body: "*"
        };
    }

    // 组织身份入网申请
    rpc ApplyIdentityJoin (ApplyIdentityJoinRequest) returns (api.protobuf.SimpleResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/applyIdentity"
            body: "*"
        };
    }

    // 注销准入网络
    rpc RevokeIdentityJoin (google.protobuf.Empty) returns (api.protobuf.SimpleResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/revokeIdentity"
            body: "*"
        };
    }
    // 查询自己组织的identity信息
    rpc GetNodeIdentity (google.protobuf.Empty)returns (GetNodeIdentityResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/getIdentity"
            body: "*"
        };
    }

    // 查询全网组织的身份信息列表(已入网的)
    rpc GetIdentityList (google.protobuf.Empty) returns (GetIdentityListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/auth/identityList"
            body: "*"
        };
    }
}

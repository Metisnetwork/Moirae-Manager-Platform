syntax = "proto3";

package rpcapi;

option go_package = "github.com/Metisnetwork/Metis-Carrier/lib/api";
option java_multiple_files = true;
option java_package = "com.moirae.rosettaflow.grpc.service";

import "lib/types/base.proto";
//import "lib/types/identitydata.proto";
import "lib/types/metadata.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

//  ------------------------  auth  ------------------------

// 组织身份入网申请 req
message ApplyIdentityJoinRequest {
  types.Organization information = 1;           // 申请准入身份
}
// 查询自己组织的identity信息 resp
message GetNodeIdentityResponse {
  int32                     status = 1;                       // 响应码
  string                    msg = 2;                          // 错误信息
  types.Organization        information = 3;                  // 自己身份信息
}

message GetIdentityListRequest {
  uint64 last_updated = 1;  // 毫秒级时间戳，上一次最后一条数据的时间戳
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 查询全网组织的身份信息列表(已入网的) resp
message GetIdentityListResponse {
  int32                              status = 1;                       // 响应码
  string                             msg = 2;                          // 错误信息
  repeated types.Organization        identitys = 3;                    // 全网身份信息列表
}

// 发起用户对元数据使用授权申请 req
message ApplyMetadataAuthorityRequest {
  string                  user = 1;                            // 发起任务的用户的信息 (授权申请, 是属于用户的)
  types.UserType          user_type = 2;                       // 用户类型 (0: 未定义; 1: 第二地址; 2: 测试网地址; 3: 主网地址)
  types.MetadataAuthority auth = 3;                            // 元数据使用授权信息
  bytes                   sign = 4;                            // 发起数据授权申请的账户的签名
}
// 发起用户对元数据使用授权申请 resp
message ApplyMetadataAuthorityResponse {
  int32  status = 1;                       // 响应码
  string msg = 2;                          // 错误信息
  string metadata_auth_id = 3;             // 元数据授权申请Id
}

// 撤销用户对元数据使用授权申请 req
message RevokeMetadataAuthorityRequest {
  string                  user = 1;                             // 发起任务的用户的信息 (授权申请, 是属于用户的)
  types.UserType          user_type = 2;                        // 用户类型 (0: 未定义; 1: 第二地址; 2: 测试网地址; 3: 主网地址)
  string                  metadata_auth_id = 3;                 // 元数据授权申请Id
  bytes                   sign = 4;                             //  撤销数据授权申请的账户的签名
}

// 组织对用户的数据授权申请做审核 req
message AuditMetadataAuthorityRequest {
  string                            metadata_auth_id = 1;                   // 元数据授权申请Id
  types.AuditMetadataOption         audit = 2;                              // 审核结果
  string                            suggestion = 3;                         // 审核意见 (允许""字符)
}
// 组织对用户的数据授权申请做审核 resp
message AuditMetadataAuthorityResponse {
  int32                            status = 1;                       // 响应码
  string                           msg = 2;                          // 错误信息
  types.AuditMetadataOption        audit = 3;                        // 审核结果 (回显)
}

//// 查看某个组织的所有元数据的授权申请及审核结果详情列表 req
//message GetMetadataAuthorityListRequest {
//  string identity_id = 1;             // 组织的身份标识 (可选, 传""则查询当前组织的元数据)
//}

message GetMetadataAuthorityListRequest {
  uint64 last_updated = 1;  // 毫秒级时间戳，上一次最后一条数据的时间戳
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 当前(组织or用户)的所有元数据的授权申请及审核结果详情列表 resp
message GetMetadataAuthorityListResponse {
  int32                                       status = 1;                       // 响应码
  string                                      msg = 2;                          // 错误信息
  repeated types.MetadataAuthorityDetail      metadata_auths = 3;               // 数据授权信息列表
}


service AuthService {

  // 组织身份入网申请
  rpc ApplyIdentityJoin (ApplyIdentityJoinRequest) returns (types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/applyIdentity"
      body: "*"
    };
  }

  // 注销准入网络
  rpc RevokeIdentityJoin (google.protobuf.Empty) returns (types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/revokeIdentity"
      body: "*"
    };
  }

  // 查询自己组织的identity信息
  rpc GetNodeIdentity (google.protobuf.Empty)returns (GetNodeIdentityResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/auth/getIdentity"
    };
  }

  // 查询全网组织的身份信息列表(已入网的)
  rpc GetIdentityList (GetIdentityListRequest) returns (GetIdentityListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/auth/identityList"
    };
  }

  // 发起数据授权申请
  rpc ApplyMetadataAuthority(ApplyMetadataAuthorityRequest) returns (ApplyMetadataAuthorityResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/applyMetadataAuth"
      body: "*"
    };
  }

  // 撤销数据授权申请
  rpc RevokeMetadataAuthority(RevokeMetadataAuthorityRequest) returns (types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/revokeMetadataAuth"
      body: "*"
    };
  }

  // 数据授权审核
  rpc AuditMetadataAuthority(AuditMetadataAuthorityRequest) returns (AuditMetadataAuthorityResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/auth/auditMetadataAuth"
      body: "*"
    };
  }

  // 查询(本组织)的所有元数据的授权申请及审核结果详情列表
  rpc GetLocalMetadataAuthorityList(GetMetadataAuthorityListRequest) returns (GetMetadataAuthorityListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/auth/localMetadataAuthList"
    };
  }

  // 查询(全网)的所有元数据的授权申请及审核结果详情列表
  rpc GetGlobalMetadataAuthorityList(GetMetadataAuthorityListRequest) returns (GetMetadataAuthorityListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/auth/globalMetadataAuthList"
    };
  }

}

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.platon.rosettaflow.grpc.service";
package rpcapi;

import "lib/api/common_message.proto";
import "google/api/annotations.proto";



//  ------------------------  task  ------------------------



// 任务详情
message TaskDetail {
    string                                task_id = 1;                         // 任务Id
    string                                task_name = 2;                       // 任务名称
    string                                user = 3;                            // 发起任务的用户的信息 (task是属于用户的)
    UserType                              user_type = 4;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    TaskOrganizationIdentityInfo          sender = 5;                          // 任务发起方
    TaskOrganizationIdentityInfo          algo_supplier = 6;                   // 算法提供方 (目前就是和 任务发起方是同一个 ...)
    repeated TaskDataSupplier             data_supplier = 7;                   // 数据提供方
    repeated TaskPowerSupplier            power_supplier = 8;                  // 算力提供方
    repeated TaskOrganizationIdentityInfo receivers = 9;                       // 任务结果方
    uint64                                create_at = 10;                      // 任务发起时间
    uint64                                start_at = 11;                       // 任务启动时间
    uint64                                end_at = 12;                         // 任务结束时间
    string                                state = 13;                          // 任务的状态 (pending: 等在中; running: 计算中; failed: 失败; success: 成功)
    TaskOperationCostDeclare              operation_cost = 14;                 // 任务所需资源声明
}
// 任务数据提供方信息 (任务详情展示用)
message TaskDataSupplier {
    TaskOrganizationIdentityInfo member_info = 1;                              // 身份信息
    string                       meta_data_id = 2;                             // 元数据Id
    string                       meta_data_name = 3;                           // 元数据名称
}
// 任务算力提供方信息 (任务详情展示用)
message TaskPowerSupplier {
    TaskOrganizationIdentityInfo member_info = 1;                         // 身份信息
    ResourceUsedDetail           power_info = 2;                          // 算力使用情况
}

// 任务事件定义
message TaskEvent {
    string                   type = 1;                        // 事件类型码
    string                   task_id = 2;                     // 事件对应的任务id
    OrganizationIdentityInfo owner = 3;                       // 产生事件的节点身份
    string                   content = 4;                     // 事件内容
    uint64                   create_at = 5;                   // 事件产生时间
}

message TaskEventDeclare {
    string type = 1;                        // 事件类型码
    string task_id = 2;                     // 事件对应的任务id
    string identity_id = 3;                 // 产生事件的节点身份
    string content = 4;                     // 事件内容
    uint64 create_at = 5;                   // 事件产生时间
}


// 任务数据供应者信息 (任务详情定义用)
message TaskDataSupplierDeclare {
    TaskOrganizationIdentityInfo member_info = 1;                         // 身份信息
    TaskMetaDataDeclare          meta_data_info = 2;                      // 任务使用的元数据信息
}

message TaskMetaDataDeclare {
    string          meta_data_id = 1;                                 // 元数据id
    repeated uint64 column_index_list = 2;                            // 该任务使用原始数据的第几列
}

message TaskResultReceiverDeclare {
    TaskOrganizationIdentityInfo          member_info = 1;                       // 结果接收方身份信息
    repeated TaskOrganizationIdentityInfo providers = 2;                         // 被接收结果的生成方身份信息
}


// 任务的所需操作成本 (定义任务的大小)
message TaskOperationCostDeclare {
    uint64 cost_mem = 1;               // 任务所需的内存 (单位: byte)
    uint64 cost_processor = 2;         // 任务所需的核数 (单位: 个)
    uint64 cost_bandwidth = 3;         // 任务所需的带宽 (单位: bps)
    uint64 duration = 4;               // 任务所需的运行时长 (单位: ms)
}





message GetTaskDetailResponse {
    TaskDetail     information = 1;             // 任务详情
    string         role = 2;                    // 我在任务中的角色 (owner: 任务发起方; dataSupplier: 数据提供方: powerSupplier: 算力提供方; receiver: 结果接收方)
}
message GetTaskDetailListResponse {
    int32                          status = 1;                 // 响应码
    string                         msg = 2;                    // 错误信息
    repeated GetTaskDetailResponse task_list = 3;              // 任务详情列表
}

message GetTaskEventListRequest {
    string task_id = 1;
}
message GetTaskEventListByTaskIdsRequest {
    repeated string task_ids = 1;
}
message GetTaskEventListResponse {
    int32                  status = 1;                      // 响应码
    string                 msg = 2;                         // 错误信息
    repeated TaskEvent     task_event_list = 3;             // 任务事件列表
}


message PublishTaskDeclareRequest {
    string                             task_name = 1;                        //  任务名称
    string                             user = 2;                             //  发起任务的用户的信息 (task是属于用户的)
    UserType                           user_type = 3;                        //  用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    TaskOrganizationIdentityInfo       sender = 4;                           //  任务发起者 组织信息
    repeated TaskDataSupplierDeclare   data_supplier = 5;                    //  任务的数据提供方, 包含发起者和参与方
    repeated string                    power_party_ids = 6;                  //  算力提供方未来要用的 标签
    repeated TaskResultReceiverDeclare receivers = 7;                        //  任务结果接受者
    TaskOperationCostDeclare           operation_cost = 8;                   //  任务所需资源声明
    string                             calculate_contractcode = 9;           //  计算合约
    string                             datasplit_contractcode = 10;          //  数据分片合约
    string                             contract_extra_params = 11;           //  合约调用的额外可变入参 (json 字符串, 根据算法来)
    bytes                              sign = 12;                            //  发起任务的账户的签名
}

message PublishTaskDeclareResponse {
    int32  status = 1;                      // 响应码
    string msg = 2;                         // 错误信息
    string task_id = 3;                     // 任务id
}


message TerminateTaskRequest {
    string                              user = 1;                             //  发起任务的用户的信息 (task是属于用户的)
    UserType                            user_type = 2;                        //  用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
    string                              task_id = 3;                          //  任务id
    bytes                               sign = 12;                            //  发起任务的账户的签名
}

// ## 任务 相关接口
service TaskService {

    // 查看全部任务详情列表
    rpc GetTaskDetailList (EmptyGetParams) returns (GetTaskDetailListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/task/list"
            body: "*"
        };
    }

    // 查看某个任务的全部事件列表
    rpc GetTaskEventList (GetTaskEventListRequest) returns (GetTaskEventListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/task/eventList"
            body: "*"
        };
    }

    // 查看某个任务的全部事件列表
    rpc GetTaskEventListByTaskIds (GetTaskEventListByTaskIdsRequest) returns (GetTaskEventListResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/task/eventListByTaskIds"
            body: "*"
        };
    }

    // 发布任务
    rpc PublishTaskDeclare (PublishTaskDeclareRequest) returns (PublishTaskDeclareResponse) {
        option (google.api.http) = {
            post: "/carrier/v1/task/publish"
            body: "*"
        };
    }

    // 终止任务
    rpc TerminateTask (TerminateTaskRequest) returns (SimpleResponseCode) {
        option (google.api.http) = {
            post: "/carrier/v1/task/terminate"
            body: "*"
        };
    }

}
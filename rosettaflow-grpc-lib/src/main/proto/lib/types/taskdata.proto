syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.platon.rosettaflow.grpc.service";
option java_outer_classname = "TaskDataProto";
package types;

import "lib/common/base.proto";
import "lib/common/data.proto";
import "lib/types/metadata.proto";
import "lib/types/resourcedata.proto";


option go_package = "github.com/RosettaFlow/Carrier-Go/lib/types";

message TaskData {
  string                                      identity_id = 1;                            // 任务发起方的 组织的 身份标识
  string                                      node_id = 2;                                // 任务发起方的 组织的 p2p公钥
  string                                      node_name = 3;                              // 任务发起方的 组织的名称
  string                                      data_id = 4;                                //
  api.protobuf.DataStatus                     data_status = 5;                            // the status of data, N means normal, D means deleted.
  string                                      task_id = 6;                                // 任务Id
  string                                      task_name = 7;                              // 任务名称
  api.protobuf.TaskState                      state = 8;                                  // 任务的状态 (0: 未知; 1: 等在中; 2: 计算中; 3: 失败; 4: 成功)
  string                                      reason = 9;                                 // 任务失败原因
  uint32                                      event_count = 10;                           // 任务的事件个数
  string                                      desc = 11;                                  // 任务描述(非必须)
  uint64                                      create_at = 12;                             // 任务的发起时间戳 (单位: ms)
  uint64                                      end_at = 13;                                // 任务的终止<成功or失败>时间戳 (单位: ms)
  uint64                                      start_at = 14;                              // 任务的开始执行时间戳 (单位: ms)
  string                                      party_id = 15;                              // 任务发起方的 partyId
  api.protobuf.TaskOrganization               algo_supplier = 20;                         // 任务的算法提供者信息
  api.protobuf.TaskResourceCostDeclare        operation_cost = 21;                        // 任务的初始资源声明
  repeated TaskDataSupplier                   data_supplier = 22;                         // 任务的数据提供方组信息 (可包含发起方和参与方)
  repeated TaskPowerSupplier                  power_supplier = 23;                        // 任务的算力提供方组织信息 (可包含发起方和参与方)
  repeated api.protobuf.TaskOrganization      receivers = 24;                             // 任务的结果接收方组织信息 (可包含发起方和参与方)
  repeated TaskEvent                          task_event_list = 25;                       // 任务的所有产生事件列表
  string                                      calculate_contract_code = 26;               // 任务的计算合约代码
  string                                      data_split_contract_code = 27;              // 任务的数据分片合约代码
  string                                      contract_extra_params = 28;                 // 任务的合约调用的额外可变入参 (json 字符串, 根据算法来)
  // v2.0
  string                                      user = 29;                                  // 发起任务的用户的信息 (task是属于用户的)
  api.protobuf.UserType                       user_type = 30;                             // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
}

// 定义：任务详细信息
message TaskDetail {
  string                                          task_id = 1;                         // 任务Id
  string                                          task_name = 2;                       // 任务名称
  string                                          user = 3;                            // 发起任务的用户的信息 (task是属于用户的)
  api.protobuf.UserType                           user_type = 4;                       // 用户类型 (0: 未定义; 1: 以太坊地址; 2: Alaya地址; 3: PlatON地址)
  api.protobuf.TaskOrganization                   sender = 5;                          // 任务发起方
  api.protobuf.TaskOrganization                   algo_supplier = 6;                   // 算法提供方 (目前就是和 任务发起方是同一个 ...)
  repeated TaskDataSupplier                       data_supplier = 7;                   // 数据提供方
  repeated TaskPowerSupplier                      power_supplier = 8;                  // 算力提供方
  repeated api.protobuf.TaskOrganization          receivers = 9;                       // 任务结果方
  uint64                                          create_at = 10;                      // 任务的发起时间戳 (单位: ms)
  uint64                                          start_at = 11;                       // 任务的开始执行时间戳 (单位: ms)
  uint64                                          end_at = 12;                         // 任务的终止<成功or失败>时间戳 (单位: ms)
  api.protobuf.TaskState                          state = 13;                          // 任务的状态 (0: 未知; 1: 等在中; 2: 计算中; 3: 失败; 4: 成功)
  api.protobuf.TaskResourceCostDeclare            operation_cost = 14;                 // 任务所需资源声明
  string                                          desc = 15;                           // 任务描述 (非必须)
  repeated TaskEvent                              task_event_list = 16;                // 任务所产生的所有事件列表
}

// 任务算力提供方信息
message TaskPowerSupplier {
  // 身份信息
  api.protobuf.TaskOrganization organization = 1;
  // 算力使用情况
  types.ResourceUsageOverview resource_used_overview = 2;
}

//// 定义：任务结果接收详细信息
//message TaskResultReceiver {
//  // 任务接收方组织信息
//  api.protobuf.TaskOrganization receiver = 1;
//  // 算力提供方组织信息 (注: 该处为可以指定哪些算力提供方给该接收方发送计算结果)
//  repeated api.protobuf.TaskOrganization providers = 2;
//}

// 任务数据提供方基本信息
message TaskDataSupplier {
  api.protobuf.TaskOrganization member_info = 1;                                // 身份信息
  string                        metadata_id = 2;                                // 元数据Id
  string                        metadata_name = 3;                              // 元数据名称
  repeated MetadataColumn       column_list = 4;
}

// 任务事件定义
message TaskEvent {
  string type = 1;                        // 事件类型码
  string task_id = 2;                     // 事件对应的任务id
  string identity_id = 3;                 // 产生事件的节点身份
  string content = 4;                     // 事件内容
  uint64 create_at = 5;                   // 事件产生时间戳 (单位: ms)
}


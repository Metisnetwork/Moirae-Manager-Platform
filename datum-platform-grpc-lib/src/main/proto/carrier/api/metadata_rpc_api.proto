syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/carrier/api";

package carrier.api;

import "carrier/types/common.proto";
import "carrier/types/identitydata.proto";
import "carrier/types/metadata.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

//  ------------------------  metadata  ------------------------

// (全网) 单个元数据详情 resp
message GetGlobalMetadataDetail {
  carrier.types.Organization          owner = 1;              // 元数据的拥有者
  carrier.types.MetadataDetail        information = 2;        // 元文件详情主体
}

message GetGlobalMetadataDetailListRequest {
  uint64 last_updated = 1;  // 毫秒级时间戳，上一次最后一条数据的时间戳
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 查看 全网元数据列表  resp
message GetGlobalMetadataDetailListResponse {
  int32                                     status = 1;                      // 响应码
  string                                    msg = 2;                         // 错误信息
  repeated GetGlobalMetadataDetail          metadatas = 3;                   // 元数据列表
}

// (本组织) 单个元数据详情 resp
message GetLocalMetadataDetail {
  carrier.types.Organization          owner = 1;                  // 元数据的拥有者
  carrier.types.MetadataDetail        information = 2;            // 元文件详情主体
  bool                                is_internal = 3;            // 是否为本组织内部元数据 (不对外的元数据, true: 是内部元数据; false: 不是)
}

message GetLocalMetadataDetailListRequest {
  uint64 last_updated = 1;  // 毫秒级时间戳，上一次最后一条数据的时间戳
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 查看 本组织元数据列表  resp
message GetLocalMetadataDetailListResponse {
  int32                                     status = 1;                      // 响应码
  string                                    msg = 2;                         // 错误信息
  repeated GetLocalMetadataDetail           metadatas = 3;                   // 元数据列表
}

// 数据上架 req
message PublishMetadataRequest {
  carrier.types.MetadataSummary   information = 1;             // 元数据详情
}
// 数据上架 resp
message PublishMetadataResponse {
  int32  status = 1;                         // 响应码
  string msg = 2;                            // 错误信息
  string metadata_id = 3;                    // 元数据id
}

// 数据下架 req
message RevokeMetadataRequest {
  string metadata_id = 1;
}

// 查询某 metadata 参与过的任务的taskId列表 req
message GetMetadataUsedTaskIdListRequest {
  string      identity_id = 1;            // 组织的身份标识 (可选, 传""则查询当前组织的元数据)
  string      metadata_id = 2;            // 元数据id
}

// 查询某 metadata 参与过的任务的taskId列表 resp
message GetMetadataUsedTaskIdListResponse {
  int32                       status = 1;           // 响应码
  string                      msg = 2;              // 错误信息
  repeated string             task_ids = 3;         // 任务Id
}

// v 0.4.0 将内部元数据重新发布成 对外的元数据 req
message PublishMetadataByInteranlMetadataRequest {
  carrier.types.MetadataSummary   information = 1;             // 元数据详情
}

// v 0.4.0 将任务的结果数据重新发布成 对外的元数据 req
message PublishMetadataByTaskResultFileRequest {
  string                                task_id = 1;                  //任务id
  carrier.types.MetadataSummary         information = 2;              // 元数据详情
}

// v 0.5.0 更新已发布的元数据 req
message UpdateMetadataRequest {
  carrier.types.MetadataSummary   information = 1;             // 元数据详情
}

// ## 元数据 相关接口
service MetadataService {

  // 查看 全网元数据列表
  rpc GetGlobalMetadataDetailList (GetGlobalMetadataDetailListRequest) returns (GetGlobalMetadataDetailListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/metadata/globalList"
    };
  }

  // 查看 本组织(已发布的)元数据列表
  rpc GetLocalMetadataDetailList (GetLocalMetadataDetailListRequest) returns (GetLocalMetadataDetailListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/metadata/localList"
    };
  }

  // 查看 本组织(内部的/未发布的/系统生成的)元数据列表
  rpc GetLocalInternalMetadataDetailList (google.protobuf.Empty) returns (GetLocalMetadataDetailListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/metadata/localInternalList"
    };
  }

  // 发布元数据  (新增和编辑 都是发布新的元数据) <底层根据 原始数据Id -- OriginId 来关联 新的MetaDataId>
  rpc PublishMetadata (PublishMetadataRequest) returns (PublishMetadataResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/metadata/publish"
      body: "*"
    };
  }

  // 撤销元数据 (从底层网络撤销)
  rpc RevokeMetadata (RevokeMetadataRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/metadata/revoke"
      body: "*"
    };
  }

  // V 0.2.0 新增
  // 查询某 metadata 参与过的任务的taskId列表
  rpc GetMetadataUsedTaskIdList (GetMetadataUsedTaskIdListRequest) returns (GetMetadataUsedTaskIdListResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/metadata/usedTaskIdList"
      body: "*"
    };
  }

  // v 0.4.0 将内部元数据重新发布成 对外的元数据
  rpc PublishMetadataByInteranlMetadata (PublishMetadataByInteranlMetadataRequest) returns (PublishMetadataResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/metadata/publishByInteranlMetadata"
      body: "*"
    };
  }

  // v 0.4.0 将任务的结果数据重新发布成 对外的元数据
  rpc PublishMetadataByTaskResultFile (PublishMetadataByTaskResultFileRequest) returns (PublishMetadataResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/metadata/publishByTaskResultFile"
      body: "*"
    };
  }

  // v 0.5.0 更新已经发布元数据相关信息
  rpc UpdateMetadata(UpdateMetadataRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/metadata/updateMetadata"
      body: "*"
    };
  }
}

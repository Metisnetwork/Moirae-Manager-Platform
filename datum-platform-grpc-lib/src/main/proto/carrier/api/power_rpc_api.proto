syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/carrier/api";

package carrier.api;

import "carrier/types/common.proto";
import "carrier/types/identitydata.proto";
import "carrier/types/resourcedata.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

//  ------------------------  power  ------------------------

// 单个组织的总算力信息
message GetGlobalPowerSummary {
  carrier.types.Organization        owner = 1;                  // 算力拥有者信息
  carrier.types.PowerUsageDetail    information = 2;            // 算力单个摘要
}

// 查看全网各个组织的总算力(累加)详情列表 resp
message GetGlobalPowerSummaryListResponse {
  int32                                 status = 1;       // 响应码
  string                                msg = 2;          // 错误提示信息
  repeated GetGlobalPowerSummary        powers = 3;       // 全网的各个组织的累加power详情列表
}

// 单个组织的各个算力信息
message GetGlobalPowerDetail {
  carrier.types.Organization          owner = 1;                  // 算力拥有者信息
  carrier.types.PowerUsageDetail      information = 2;            // 算力总详细
  string                              power_id = 3;               // 算力id
}

message GetGlobalPowerDetailListRequest {
  uint64 last_updated = 1;  // 毫秒级时间戳，上一次最后一条数据的时间戳
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 全网各个组织的各个算力列表 resp
message GetGlobalPowerDetailListResponse {
  int32                                 status = 1;      // 响应码
  string                                msg = 2;         // 错误提示信息
  repeated GetGlobalPowerDetail         powers = 3;      // 全网的各个组织的各个power详情列表
}

// 本组织的单个(宿主机)算力信息 (包含【未发布】和【已发布】的) resp
message GetLocalPowerDetail {
  carrier.types.Organization          owner = 1;                  // 算力拥有者信息
  carrier.types.PowerUsageDetail      power = 2;                  // 算力单个摘要
  string                              job_node_id = 3;            // 计算服务id (单个宿主机的id)
  string                              power_id = 4;               // 算力id (对于未发布的算力, powerId为"")
}

message GetLocalPowerDetailListRequest {
  uint64 last_updated = 1;  // UTC毫秒级时间戳，上一次最后一条数据的时间戳
  uint64 page_size = 2;     // 单次批量数据的返回条数
}

// 本组织的多个(宿主机)算力信息 (包含【未发布】和【已发布】的)
message GetLocalPowerDetailListResponse {
  int32                                   status = 1;         // 响应码
  string                                  msg = 2;            // 错误提示信息
  repeated GetLocalPowerDetail            powers = 3;         // 单个节点的算力总摘要列表
}

// 启用算力 req
message PublishPowerRequest {
  string job_node_id = 1;     // 计算服务id (节点内部的)
}
// 启用算力 resp
message PublishPowerResponse {
  int32  status = 1;                         // 响应码
  string msg = 2;                            // 错误信息
  string power_id = 3;                       // 算力id
}

// 停用算力 req
message RevokePowerRequest {
  string power_id = 1;        // 算力id
}

// ## 算力 相关接口
///           【注意】 算力和元数据 不一样,
//                    查看外部组织时, 只需要知道外部组织的总算力, 而外部组织的元数据则需要知道单个单个的;
//                    查看自己组织时, 自己组织的算力和元数据都需要知道单个单个的.
service PowerService {

  // 查看全网各个组织的总算力(累加)详情列表
  rpc GetGlobalPowerSummaryList (google.protobuf.Empty) returns (GetGlobalPowerSummaryListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/power/globalSummaryList"
    };
  }

  // 查看全网各个组织的各个算力详情列表
  rpc GetGlobalPowerDetailList (GetGlobalPowerDetailListRequest) returns (GetGlobalPowerDetailListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/power/globalDetailList"
    };
  }

  // 本组织的所有(宿主机)算力信息列表 (包含【未发布】和【已发布】的)
  rpc GetLocalPowerDetailList (google.protobuf.Empty) returns (GetLocalPowerDetailListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/power/localDetailList"
    };
  }

  // 启用算力 (发布算力)
  rpc PublishPower (PublishPowerRequest) returns (PublishPowerResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/power/publish"
      body: "*"
    };
  }

  // 停用算力 (撤销算力)
  rpc RevokePower (RevokePowerRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/power/revoke"
      body: "*"
    };
  }
}

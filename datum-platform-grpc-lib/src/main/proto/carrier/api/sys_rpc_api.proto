syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/carrier/api";

package carrier.api;

import "common/constant/carrier_enum.proto";
import "carrier/types/common.proto";
import "carrier/types/identitydata.proto";
import "carrier/types/taskdata.proto";
import "carrier/types/resourcedata.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

//  ------------------------  yarn  ------------------------

// 节点进程类型
enum NodeType {
  NodeType_Unknown = 0;           // 未知
  NodeType_SeedNode = 1;          // 种子节点
  NodeType_JobNode = 2;           // 计算节点
  NodeType_DataNode = 3;          // 数据节点
  NodeType_YarnNode = 4;          // 调度节点
}

// 调度服务节点的状态
enum YarnNodeState {
  State_Unknown = 0;              // 未知
  State_Active = 1;               // active: 活跃
  State_Leave = 2;                // leave: 离开网络
  State_Join = 3;                 // join: 加入网络
  State_Unuseful = 4;             // unuseful: 不可用
}

// 调度服务和 种子节点 or 计算服务 or 数据服务 的连接状态
// 调度服务自身的状态信息 (0: 未被调度服务连接上; 1: 连接上; )
enum ConnState {
  ConnState_UnConnected = 0;
  ConnState_Connected = 1;
}

// 调度服务的信息
message YarnNodeInfo {
  NodeType                              node_type = 1;                             // 服务node的类型
  string                                node_id = 2;                               // 调度服务的 nodeId, 代表整个机构的 nodeId
  string                                internal_ip = 3;                           // 调度服务的内网 ip, 给 管理台用
  string                                external_ip = 4;                           // 调度服务的外网 ip, 给 外部做p2p用
  string                                internal_port = 5;                         // 调度服务的内网 port, 给 管理台用
  string                                external_port = 6;                         // 调度服务的外网 port, 给 外部做p2p用
  string                                identity_type = 7;                         // 身份认证标识的类型 (ca 或者 did)
  string                                identity_id = 8;                           // 身份认证标识的id
  carrier.types.ResourceUsageOverview   resource_used = 9;                         // 调度服务系统本身资源信息
  YarnNodeState                         state = 10;                                // 调度服务自身的状态信息 (0: 未知; 1: 活跃; 2: 离开网络; 3: 加入网络; 4: 不可用)
  string                                name = 12;                                 // 组织的Name
  uint32                                relate_peers = 13;                         // 本调度服务被外部组织(调度服务/种子节点)的连接数目
  string                                local_bootstrap_node = 14;                 // 当前系统的本地节点，可以作为引导节点提供给三方节点
  string                                local_multi_addr = 15;                     // 当前系统本地的 multiAddr, eg: /ip4/127.0.0.1/tcp/18001/p2p/16Uiu2HAmKMo4Ci5TYcXspnKnMWK4G4CRWSHBV4qCUAFYrtirhcuz
  string                                observer_proxy_wallet_address = 16;        // 当前组织内置系统钱包地址 (见证人代理钱包) v 0.4.0
}


// 调度服务上被注册的资源节点信息
message YarnRegisteredPeer {
  NodeType                 node_type = 1;                    // 计算or数据服务node的类型
  YarnRegisteredPeerDetail node_detail = 2;                  // 计算or数据服务node的网络信息
}

message YarnRegisteredPeerDetail {
  string          id = 1;                            // 计算or数据服务的唯一Id
  string          internal_ip = 2;                   // 计算or数据服务的内网 ip, 给 管理台用
  string          external_ip = 3;                   // 计算or数据服务的外网 ip, 给 多方协作任务用
  string          internal_port = 4;                 // 计算or数据服务的内网 port, 给 管理台用
  string          external_port = 5;                 // 计算or数据服务的外网 port, 给 多方协作任务用
  ConnState       conn_state = 6;                    // 计算or数据服务的状态 (0: 未被调度服务连接上; 1: 连接上)
  uint64          duration = 7;
  uint32          task_count = 8;                    // 未使用
  repeated string task_id_list = 9;                  // 未使用
  uint32          file_count = 10;                   // 未使用
  uint32          file_total_size = 11;              // 未使用
}

message SeedPeer {
  string          addr = 1;                          // 种子节点p2p用的addr (目前对应libp2p的MultiAddr)
  bool            is_default = 2;                    // 是否内置的种子节点 (true: 是内置的; false: 不是; 注: 配置文件或者代码写死的都是内置的, 通过管理台设置的则不是内置的; 内置种子节点不可被删除/修改)
  ConnState       conn_state = 3;                    // 是否被调度服务连接上 (0: 未被调度服务连接上; 1: 连接上)
}


// 查看自身调度服务信息 resp
message GetNodeInfoResponse {
  int32        status = 1;                      // 响应码
  string       msg = 2;                         // 错误信息
  YarnNodeInfo information = 3;                 // 调度服务系统信息
}


// 删除种子or计算or数据服务node信息 req
message DeleteRegisteredNodeRequest {
  string id = 1;                            // 内部节点的唯一Id
}

// 新增种子节点信息 req
message SetSeedNodeRequest {
  string addr = 1;
}
// 删除种子节点信息 req
message DeleteSeedNodeRequest {
  string addr = 1;
}

// 新增 种子节点信息 resp
message SetSeedNodeResponse {
  int32    status = 1;                      // 响应码
  string   msg = 2;                         // 错误信息
  SeedPeer node = 3;                        // 种子节点的详情信息
}

// 查询种子节点列表 resp
message GetSeedNodeListResponse {
  int32             status = 1;                      // 响应码
  string            msg = 2;                         // 错误信息
  repeated SeedPeer nodes = 3;                       // 种子节点的详情列表信息
}

// 新增数据服务信息 req
message SetDataNodeRequest {
  string internal_ip = 3;                   // 数据服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
  string external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
}
// 新增|修改 数据服务信息 resp
message SetDataNodeResponse {
  int32                    status = 1;                      // 响应码
  string                   msg = 2;                         // 错误信息
  YarnRegisteredPeerDetail node = 3;                        // 数据服务信息
}
// 修改数据服务信息 req
message UpdateDataNodeRequest {
  string id = 1;                            // 数据服务的唯一id
  string internal_ip = 3;                   // 数据服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 数据服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 数据服务的内网 port, 给 管理台用
  string external_port = 6;                 // 数据服务的外网 port, 给 多方协作任务用
}
// 查询数据 or 计算 服务列表 resp
message GetRegisteredNodeListResponse {
  int32                       status = 1;                      // 响应码
  string                      msg = 2;                         // 错误信息
  repeated YarnRegisteredPeer nodes = 3;                       // 数据 or 计算 服务列表
}


// 新增计算服务信息 req
message SetJobNodeRequest {
  string internal_ip = 3;                   // 计算服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
  string external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
}
// 新增|修改 计算服务信息 resp
message SetJobNodeResponse {
  int32                    status = 1;                      // 响应码
  string                   msg = 2;                         // 错误信息
  YarnRegisteredPeerDetail node = 3;                        // 计算服务信息
}
// 修改计算服务信息 req
message UpdateJobNodeRequest {
  string id = 1;                            // 计算服务的唯一id
  string internal_ip = 3;                   // 计算服务的内网 ip, 给 管理台用
  string external_ip = 4;                   // 计算服务的外网 ip, 给 多方协作任务用
  string internal_port = 5;                 // 计算服务的内网 port, 给 管理台用
  string external_port = 6;                 // 计算服务的外网 port, 给 多方协作任务用
}

// 数据/计算服务 上报任务事件 req
message ReportTaskEventRequest {
  carrier.types.TaskEvent task_event = 1;     // 事件信息
}

// 数据/计算服务 上报任务资源使用实况 req
message ReportTaskResourceUsageRequest {
  string                                task_id = 1;                          // 任务Id
  string                                party_id = 2;                         // 本资源在该 task 中的 partyId
  NodeType                              node_type = 3;                        // 计算or数据服务node的类型
  string                                ip = 4;                               // Fighter 的 grpc server IP
  string                                port = 5;                             // Fighter 的 grpc server PORT
  carrier.types.ResourceUsageOverview   usage = 6;                            // 计算or数据的资源实况
}

// 上报 成功上传的原始文件Id req
message ReportUpFileSummaryRequest {
  string                              origin_id = 1;          // 被成功上传的原始文件的 Id
  string                              ip = 2;                 // Fighter 的 grpc server IP
  string                              port = 3;               // Fighter 的 grpc server PORT
  string                              data_hash = 4;          // 对数据内容的hash，不包含文件名
  common.constant.OrigindataType      data_type = 5;          // 原始数据的类型
  string                              metadata_option = 6;    // 元数据的选项，和 data_type 配套使用
}

// 上报 任务结果文件摘要 req
message ReportTaskResultFileSummaryRequest {
  string                              task_id = 1;           // 任务Id
  string                              origin_id = 2;         // 任务结果的原始文件的 Id
  string                              ip = 3;                // Fighter 的 grpc server IP
  string                              port = 4;              // Fighter 的 grpc server PORT
  string                              extra = 5;             // 任务结果文件的额外字段 (如: 训练任务的模型评估结果json 等)
  string                              data_hash = 6;         // 对数据内容的hash，不包含文件名
  common.constant.OrigindataType      data_type = 7;         // 原始数据的类型
  string                              metadata_option = 8;   // 元数据的选项，和 data_type 配套使用
}

// 查询可用数据服务资源目标 ip:port 信息 req
message QueryAvailableDataNodeRequest {
  uint64                                          data_size = 1;       // 要被上传的目标(数据)文件 大小 (单位: byte)
  common.constant.OrigindataType                  data_type = 2;       // 要被上传的目标(数据)文件  类型 (默认: 1 "csv")
}
// 查询可用数据服务资源目标 ip:port 信息 resp
message QueryAvailableDataNode {
  string ip = 1;                 // 可以被用来上传文件的 数据服务内网 ip
  string port = 2;               // 可以被用来上传文件的 数据服务内网 port
}
message QueryAvailableDataNodeResponse {
  int32  status = 1;                          // 响应码
  string msg = 2;                             // 错误信息
  QueryAvailableDataNode   information = 3;   // 数据节点 ip 和 端口
}
// 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径 req
message QueryFilePositionRequest {
  string origin_id = 1;              // 需要被下载的目标原始文件的 id
}
// 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径 resp
message QueryFilePosition {
  string ip = 1;                     // 需要被下载的目标原始文件所在的 数据服务内网ip
  string port = 2;                   // 需要被下载的目标原始文件所在的 数据服务内网port
  string data_path = 3;              // 需要被下载的目标原始文件的完整相对路径名
}
message QueryFilePositionResponse {
  int32  status = 1;                          // 响应码
  string msg = 2;                             // 错误信息
  QueryFilePosition information = 3;          // 需要被下载的目标原始文件信息
}

// 查询 任务结果文件摘要 req
message GetTaskResultFileSummaryRequest {
  string task_id = 1;
}

// 查询 任务结果文件摘要 resp
message GetTaskResultFileSummary {
  string                              task_id = 1;                  // 任务结果文件对应的任务Id
  string                              metadata_name = 2;            // 任务结果文件的(系统生成的、内部的)元数据名称
  string                              metadata_id = 3;              // 任务结果文件的元数据Id <系统默认生成的元数据>
  string                              origin_id = 4;                // 任务结果文件的原始文件Id
  string                              ip = 5;                       // 任务结果文件所在的 数据服务内网ip
  string                              port = 6;                     // 任务结果文件所在的 数据服务内网port
  string                              extra = 7;                    // 任务结果文件的额外字段 (如: 训练任务的模型评估结果json 等)
  string                              data_hash = 8;                // 对数据内容的hash，不包含文件名
  common.constant.OrigindataType      data_type = 9;                // 原始数据的类型
  string                              metadata_option = 10;         // 元数据的选项，和 data_type 配套使用
}

message GetTaskResultFileSummaryResponse {
  int32  status = 1;                          // 响应码
  string msg = 2;                             // 错误信息
  GetTaskResultFileSummary information = 3;   // 任务结果文件信息
}

// 查询当前组织参与的所有任务结果文件摘要 resp
message GetTaskResultFileSummaryListResponse {
  int32                              status = 1;                      // 响应码
  string                             msg = 2;                         // 错误信息
  repeated GetTaskResultFileSummary  task_result_files = 3;           // 当前组织参与的所有任务结果文件摘要列表
}

message GenerateObServerProxyWalletAddressResponse {
  int32   status = 1;    // 响应码
  string  msg = 2;       // 错误信息
  string  address = 3;   // 当前组织内置系统钱包地址 (见证人代理钱包)
}

// ## 调度服务 - 系统状态 接口
service YarnService {

  // Getter YarnNode ...
  // 查看自身调度服务信息
  rpc GetNodeInfo (google.protobuf.Empty) returns (GetNodeInfoResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/yarn/nodeInfo"
    };
  }


  // about seed
  // 新增种子节点信息
  rpc SetSeedNode (SetSeedNodeRequest) returns (SetSeedNodeResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/setSeed"
      body: "*"
    };
  }

  // 删除种子节点信息
  rpc DeleteSeedNode (DeleteSeedNodeRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/deleteSeed"
      body: "*"
    };
  }

  // 查询种子节点列表
  rpc GetSeedNodeList (google.protobuf.Empty) returns (GetSeedNodeListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/yarn/seedList"
    };
  }

  // about dataNode
  // 新增数据服务信息
  rpc SetDataNode (SetDataNodeRequest) returns (SetDataNodeResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/setDataNode"
      body: "*"
    };
  }

  // 修改数据服务信息
  rpc UpdateDataNode (UpdateDataNodeRequest) returns (SetDataNodeResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/updateDataNode"
      body: "*"
    };
  }

  // 删除数据服务信息
  rpc DeleteDataNode (DeleteRegisteredNodeRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/deleteDataNode"
      body: "*"
    };
  }

  // 查询数据服务列表
  rpc GetDataNodeList (google.protobuf.Empty) returns (GetRegisteredNodeListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/yarn/dataNodeList"
    };
  }

  // about jobNode
  // 新增计算服务信息
  rpc SetJobNode (SetJobNodeRequest) returns (SetJobNodeResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/setJobNode"
      body: "*"
    };
  }

  // 修改计算服务信息
  rpc UpdateJobNode (UpdateJobNodeRequest) returns (SetJobNodeResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/updateJobNode"
      body: "*"
    };
  }

  // 删除计算服务信息
  rpc DeleteJobNode (DeleteRegisteredNodeRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/deleteJobNode"
      body: "*"
    };
  }

  // 查询计算服务列表 (宿主机的物理信息和网络连接信息)
  rpc GetJobNodeList (google.protobuf.Empty) returns (GetRegisteredNodeListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/yarn/jobNodeList"
    };
  }

  // about report
  // 数据/计算服务 上报任务事件
  rpc ReportTaskEvent (ReportTaskEventRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/reportTaskEvent"
      body: "*"
    };
  }

  // 数据/计算服务 上报资源使用实况
  rpc ReportTaskResourceUsage (ReportTaskResourceUsageRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/reportTaskResourceUsage"
      body: "*"
    };
  }

  // 上报 成功上传的原始文件Id
  rpc  ReportUpFileSummary (ReportUpFileSummaryRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/reportUpFileSummary"
      body: "*"
    };
  }

  // 上报 任务结果文件摘要
  rpc ReportTaskResultFileSummary (ReportTaskResultFileSummaryRequest) returns (carrier.types.SimpleResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/reportTaskResultFileSummary"
      body: "*"
    };
  }

  // 查询可用数据服务资源目标 ip:port 信息
  rpc QueryAvailableDataNode (QueryAvailableDataNodeRequest) returns (QueryAvailableDataNodeResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/queryAvailableDataNode"
      body: "*"
    };
  }

  // 查询需要下载的目标原始文件所在的 数据服务信息和文件的完整相对路径
  rpc QueryFilePosition (QueryFilePositionRequest) returns (QueryFilePositionResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/queryFilePosition"
      body: "*"
    };
  }

  // 查询 任务结果文件摘要
  rpc GetTaskResultFileSummary (GetTaskResultFileSummaryRequest) returns (GetTaskResultFileSummaryResponse) {
    option (google.api.http) = {
      post: "/carrier/v1/yarn/taskResultFileSummary"
      body: "*"
    };
  }

  // 查询当前组织参与的所有任务结果文件摘要
  rpc GetTaskResultFileSummaryList (google.protobuf.Empty) returns (GetTaskResultFileSummaryListResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/yarn/taskResultFileSummaryList"
    };
  }

  // v 0.4.0 生成当前组织内置系统钱包地址 (见证人代理钱包, 全局只有一个)
  rpc GenerateObServerProxyWalletAddress (google.protobuf.Empty) returns (GenerateObServerProxyWalletAddressResponse) {
    option (google.api.http) = {
      get: "/carrier/v1/yarn/generateObserverProxyWallet"
    };
  }

  //  // v 0.4.0 查询当前组织内置系统钱包地址 (见证人代理钱包)
  //  rpc GetObServerProxyWalletAddress (google.protobuf.Empty) returns (GetObServerProxyWalletAddressResponse) {
  //    option (google.api.http) = {
  //      get: "/carrier/v1/yarn/observerProxyWalletAddress"
  //    };
  //  }

}

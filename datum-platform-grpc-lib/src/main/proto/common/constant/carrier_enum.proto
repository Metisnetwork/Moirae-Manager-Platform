syntax = "proto3";

option go_package = "github.com/datumtechs/datum-network-carrier/pb/common/constant";

package common.constant;

// add by 0.5.0
enum IdentityType {
  Identity_Unknown = 0;
  Identity_DID = 1;    // DID
}

enum UserType {
  User_Unknown = 0;
  User_1 = 1;    // PlatON
  User_2 = 2;    // Alaya
  User_3 = 3;    // Ethereum
}

// the status of data for local storage, 1 means valid, 2 means invalid
enum DataStatus {
  DataStatus_Unknown = 0;
  DataStatus_Valid = 1;
  DataStatus_Invalid = 2;
}

// the status of data for datacenter, 1 means valid, 2 means invalid
enum CommonStatus {
  CommonStatus_Unknown = 0;
  CommonStatus_Valid = 1;
  CommonStatus_Invalid = 2;
}

enum AuditMetadataOption {
  Audit_Pending = 0;          // 等待审核中
  Audit_Passed = 1;           // 审核通过
  Audit_Refused = 2;          // 审核拒绝
}

// 元数据类型
enum MetadataType {
  MetadataType_Unknown = 0;         // 未知
  MetadataType_DataFile = 1;        // 普通数据
  MetadataType_ModuleFile = 2;      // 模型数据
  //  MetadataType_AlgorithmFile = 3;   // 算法数据

}

// 数据的位置 (本地、远端、云等)
enum DataLocationType {
  DataLocationType_Unknown = 0;             // 未知
  DataLocationType_Local = 1;               // (存储在组织本地服务器上, 直接可以拿到该文件)
  DataLocationType_URL = 2;                 // (存储在远端服务器上, 通过 url 等方式拿到该文件)
}

// 原始数据类型 (文件类型)
enum OrigindataType {
  OrigindataType_Unknown = 0;             // 未知
  OrigindataType_CSV = 1;                 // csv
  OrigindataType_DIR = 2;                 // dir     (目录)
  OrigindataType_BINARY = 3;              // binary  (普通的二进制数据, 没有明确说明后缀的二进制文件)
  OrigindataType_XLS = 4;                 // xls
  OrigindataType_XLSX = 5;                // xlsx
  OrigindataType_TXT = 6;                 // txt
  OrigindataType_JSON = 7;                // json
  //  OrigindataType_Python = 20001;      // python
}

// 元数据的状态 (0: 未知; 1: 还未发布的新表; 2: 已发布的表; 3: 已撤销的表)
enum MetadataState {
  MetadataState_Unknown = 0;
  MetadataState_Created = 1;
  MetadataState_Released = 2;
  MetadataState_Revoked = 3;
}

// 元数据的使用方式类型枚举 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
enum MetadataUsageType {
  Usage_Unknown = 0;        // 未定义类型
  Usage_Period = 1;         // 依照时间段来使用
  Usage_Times = 2;          // 依照次数来使用
}

// 算力的状态 (0: 未知; 1: 还未发布的算力; 2: 已发布的算力(算力未被占用); 3: 已发布的算力(算力正在被占用); 4: 已撤销的算力)
enum PowerState {
  PowerState_Unknown = 0;
  PowerState_Created = 1;
  PowerState_Released = 2;
  PowerState_Occupation = 3;
  PowerState_Revoked = 4;
}

// 本组织在task中的角色
enum TaskRole {
  TaskRole_Unknown = 0;                   // 未知的任务角色
  TaskRole_Sender = 1;                    // 任务发起方
  TaskRole_DataSupplier = 2;              // 数据提供方
  TaskRole_PowerSupplier = 3;             // 算力提供方
  TaskRole_Receiver = 4;                  // 结果接收方
  TaskRole_AlgoSupplier = 5;              // 算法提供方
}

// task的状态
enum TaskState {
  TaskState_Unknown = 0;                  // 未知
  TaskState_Pending = 1;                  // 等在中
  TaskState_Running = 2;                  // 计算中
  TaskState_Failed = 3;                   // 失败
  TaskState_Succeed = 4;                  // 成功
}

// 数据授权信息的状态 (0: 未知; 1: 还未发布的数据授权; 2: 已发布的数据授权; 3: 已撤销的数据授权 <失效前主动撤回的>; 4: 已经失效的数据授权 <过期or达到使用上限的or被拒绝的>;)
enum MetadataAuthorityState {
  MAState_Unknown = 0;
  MAState_Created = 1;
  MAState_Released = 2;
  MAState_Revoked = 3;
  MAState_Invalid = 4;
}


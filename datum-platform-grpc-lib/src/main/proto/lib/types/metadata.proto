syntax = "proto3";

package types;

import "lib/types/base.proto";


option go_package = "github.com/datumtechs/datum-network-carrier/lib/types";
option java_multiple_files = true;
option java_package = "com.datum.platform.grpc.service.types";

// todo 定义 metadata_type 枚举
// todo 是否支持 algo_metadata ?  待定
// todo 是否支持 module_metadata ? yes
// todo 是否支持 serving_metadata ? 可能不支持
// Metadata body data struct.
message MetadataPB {
  string                      metadata_id = 1;                // 元数据Id
  Organization                owner = 2;                      // 元数据所属的组织信息
  string                      data_id = 3;                    // 预留
  DataStatus                  data_status = 4;                // the status of data for local storage, 1 means valid, 2 means invalid.
  string                      metadata_name = 5;              // 元数据的名称 (对外的表名)
  MetadataType                metadata_type = 6;              // 表示该元数据是 `普通数据` 还是 `模型数据` 的元数据 (0: 未定义; 1: 普通数据元数据; 2: 模型数据元数据)
  string                      data_hash = 7;                  // 原始数据的Hash (如果是 远端数据源, 则为 资源Id 的Hash, 如: url的Hash)
  string                      desc = 8;                       // 元数据的摘要(描述)
  DataLocationType            location_type = 9;              // 源数据的存储位置类型 (组织本地服务器、远端服务器、云等)
  OrigindataType              data_type = 10;                 // 源数据的类型
  string                      industry = 11;                  // 元数据所属的行业 (有用户自定义, 仅做展示用)
  MetadataState               state = 12;                     // 元数据的状态 (0: 未知; 1: 还未发布的新表; 2: 已发布的表; 3: 已撤销的表)
  uint64                      publish_at = 13;                // 元数据发布时间
  uint64                      update_at = 14;                 // 元数据更新时间
  uint64                      nonce = 15;                     // 元数据的 nonce (用来标识该元数据在所属组织中的元数据的序号, 从 0 开始递增)
  string                      metadata_option = 16;           // 元数据的选项，和 data_type 配套使用
  bool                        allow_expose = 17;              // 是否可以被曝光 (true: 可以; false: 不可以; 如 数据原始内容可以被下载或者支持外域查看时则为 true, 默认为 false)
  string                      token_address = 18;             // 元数据对应的 dataToken 合约的地址
}

// 元数据申请记录实体
message MetadataAuthorityPB {
  string                                      metadata_auth_id = 1;     // 元数据授权申请Id
  string                                      user = 2;                 // 申请人地址
  string                                      data_id = 3;              // 预留
  DataStatus                                  data_status = 4;          // the status of data for local storage, 1 means valid, 2 means invalid.
  UserType                                    user_type = 5;            // 申请人类型
  MetadataAuthority                           auth = 6;                 // 元数据使用授权信息
  AuditMetadataOption                         audit_option  = 7;        // 审核结果
  string                                      audit_suggestion = 8;     // 审核意见 (允许""字符)
  MetadataUsedQuo                             used_quo = 9;             // 对应数据授权信息中元数据的使用实况
  uint64                                      apply_at = 10;            // 发起授权申请的时间 (单位: ms)
  uint64                                      audit_at = 11;            // 审核授权申请的时间 (单位: ms)
  MetadataAuthorityState                      state = 12;               // 数据授权信息的状态 (0: 未知; 1: 还未发布的数据授权; 2: 已发布的数据授权; 3: 已撤销的数据授权 <失效前主动撤回的>; 4: 已经失效的数据授权 <过期or达到使用上限的>)
  bytes                                       sign = 13;
  uint64                                      publish_at = 14;          // 数据发布时间
  uint64                                      update_at = 15;           // 数据更新时间
  uint64                                      nonce = 16;               // 元数据授权的 nonce (用来标识该元数据授权在所属组织中的元数据授权的序号, 从 0 开始递增)
}

// =============================== For API =========================
// 元数据的摘要内容 (不包含详细 列描述)
message MetadataSummary {
  string                        metadata_id = 1;            // 元数据Id
  string                        metadata_name = 2;          // 元数据名称|数据名称 (表名)
  MetadataType                  metadata_type = 3;          // 表示该元数据是 普通数据 还是 模型数据的元数据 (0: 未定义; 1: 普通数据元数据; 2: 模型数据元数据)
  string                        data_hash = 4;              // 原始数据内容的 sha256 的Hash
  string                        desc = 5;                   // 元数据的描述 (摘要)
  DataLocationType              location_type = 6;          // 源数据的存储位置类型 (组织本地服务器、远端服务器、云等)
  OrigindataType                data_type = 7;              // 源数据的类型 (目前只有 csv)
  string                        industry = 8;               // 元数据所属行业 (有用户自定义, 仅做展示用)
  MetadataState                 state = 9;                  // 元数据的状态 (0: 未知; 1: 还未发布的新表; 2: 已发布的表; 3: 已撤销的表)
  uint64                        publish_at = 10;            // 数据发布时间
  uint64                        update_at = 11;             // 数据更新时间
  uint64                        nonce = 12;                 // 元数据的 nonce (用来标识该元数据在所属组织中的元数据的序号, 从 0 开始递增)
  string                        metadata_option = 13;       // 元数据选项 (json字符串, 根据 data_type 的值来配对对应的模板)
  bool                          allow_expose = 14;          // 是否可以被曝光 (true: 可以; false: 不可以; 如 数据原始内容可以被外部组织下载或者支持外部组织查看时则为 true, 默认为 false)
  string                        token_address = 15;         // 元数据对应的 dataToken 合约的地址 (元数据发布时该字段是空的, 当绑定时才赋值)
}

// 元数据的详情信息
message MetadataDetail {
  MetadataSummary         metadata_summary = 1;            // 元数据摘要
  uint32                  total_task_count = 3;            // 该元数据参与过得任务数 (已完成的和正在执行的)
}

// 元数据的使用方式定义
message MetadataUsageRule {
  MetadataUsageType               usage_type = 1;              // 元数据的使用方式 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
  uint64                          start_at = 2;                // 可使用的开始时间 (当 usage_type 为 1 时才需要的字段)
  uint64                          end_at = 3;                  // 可使用的结束时间 (当 usage_type 为 1 时才需要的字段)
  uint32                          times = 4;                   // 可使用的次数 (当 usage_type 为 2 时才需要的字段)
}

// 元数据使用授权
message MetadataAuthority {
  Organization              owner = 1;                   // 元数据所属的组织信息
  string                    metadata_id = 2;             // 元数据Id
  MetadataUsageRule         usage_rule = 3;              // 元数据怎么使用
}

// 对应授权信息中元数据的使用实况定义 (配合数据授权使用)
message MetadataUsedQuo {
  MetadataUsageType               usage_type = 1;               // 元数据的使用方式 (0: 未定义; 1: 按照时间段来使用; 2: 按照次数来使用)
  bool                            expire = 2;                   // 是否已过期 (当 usage_type 为 1 时才需要的字段)
  uint32                          used_times = 3;               // 已经使用的次数 (当 usage_type 为 2 时才需要的字段)
}

// 当前组织的某个用户对单个元数据的授权申请及审核结果详情
message MetadataAuthorityDetail {
  string                                      metadata_auth_id = 1;                 // 元数据授权申请Id
  string                                      user = 2;                             // 发起任务的用户的信息 (数据授权 是属于用户的)
  UserType                                    user_type = 3;                        // 用户类型 (0: 未定义; 1: 第二地址; 2: 测试网地址; 3: 主网地址)
  MetadataAuthority                           auth = 4;                             // 元数据使用授权信息
  AuditMetadataOption                         audit_option = 5;                     // 审核结果
  string                                      audit_suggestion = 6;                 // 审核意见 (允许""字符)
  MetadataUsedQuo                             used_quo = 7;                         // 对应数据授权信息中元数据的使用实况
  uint64                                      apply_at = 8;                         // 发起授权申请的时间 (单位: ms)
  uint64                                      audit_at = 9;                         // 审核授权申请的时间 (单位: ms)
  MetadataAuthorityState                      state = 10;                           // 数据授权信息的状态 (0: 未知; 1: 还未发布的数据授权; 2: 已发布的数据授权; 3: 已撤销的数据授权 <失效前主动撤回的>; 4: 已经失效的数据授权 <过期or达到使用上限的>)
  uint64                                      publish_at = 11;                      // 数据发布时间 (单位: ms)
  uint64                                      update_at = 12;                       // 数据更新时间 (单位: ms)
  uint64                                      nonce = 13;                           // 元数据授权的 nonce (用来标识该元数据授权在所属组织中的元数据授权的序号, 从 0 开始递增)

}

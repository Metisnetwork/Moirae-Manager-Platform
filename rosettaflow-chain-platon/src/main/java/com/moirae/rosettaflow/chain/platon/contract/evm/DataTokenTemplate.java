package com.moirae.rosettaflow.chain.platon.contract.evm;

import com.platon.abi.solidity.EventEncoder;
import com.platon.abi.solidity.FunctionEncoder;
import com.platon.abi.solidity.TypeReference;
import com.platon.abi.solidity.datatypes.*;
import com.platon.abi.solidity.datatypes.generated.Bytes32;
import com.platon.abi.solidity.datatypes.generated.Uint256;
import com.platon.abi.solidity.datatypes.generated.Uint8;
import com.platon.crypto.Credentials;
import com.platon.protocol.Web3j;
import com.platon.protocol.core.DefaultBlockParameter;
import com.platon.protocol.core.RemoteCall;
import com.platon.protocol.core.methods.request.PlatonFilter;
import com.platon.protocol.core.methods.response.Log;
import com.platon.protocol.core.methods.response.TransactionReceipt;
import com.platon.tx.Contract;
import com.platon.tx.TransactionManager;
import com.platon.tx.gas.GasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/PlatONnetwork/client-sdk-java/releases">platon-web3j command line tools</a>,
 * or the com.platon.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/PlatONnetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.1.0.0.
 */
public class DataTokenTemplate extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_MINTER = "minter";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_JUSTICE = "justice";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_SETTLEEXCHANGE = "settleExchange";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_CAP = "cap";

    public static final String FUNC_SETJUSTICE = "setJustice";

    public static final String FUNC_ISINITIALIZED = "isInitialized";

    public static final String FUNC_INCREASEALLOWANCE = "increaseAllowance";

    public static final String FUNC_EXCHANGESTATE = "exchangeState";

    public static final String FUNC_COMMITEXCHANGE = "commitExchange";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_ROLLBACKEXCHANGE = "rollbackExchange";

    public static final String FUNC_DECREASEALLOWANCE = "decreaseAllowance";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_ISMINTER = "isMinter";

    public static final String FUNC_VERIFYFREEZEEXCHANGE = "verifyFreezeExchange";

    public static final String FUNC_USAGE_FEE = "USAGE_FEE";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_BASE = "BASE";

    public static final String FUNC_SETJUSTICEINFO = "setJusticeInfo";

    public static final String FUNC_FREEZEEXCHANGE = "freezeExchange";

    public static final String FUNC_PROOF = "proof";

    public static final Event SETJUSTICEINFO_EVENT = new Event("SetJusticeInfo",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event EXCHANGEFREEZE_EVENT = new Event("ExchangeFreeze",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXCHANGECOMMIT_EVENT = new Event("ExchangeCommit",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event EXCHANGEROLLBACK_EVENT = new Event("ExchangeRollback",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event EXCHANGESETTLE_EVENT = new Event("ExchangeSettle",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    protected DataTokenTemplate(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected DataTokenTemplate(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<String> name() {
        final Function function = new Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> minter() {
        final Function function = new Function(FUNC_MINTER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final Function function = new Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new Address(spender),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> justice() {
        final Function function = new Function(FUNC_JUSTICE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> settleExchange(BigInteger exchangeId) {
        final Function function = new Function(
                FUNC_SETTLEEXCHANGE,
                Arrays.<Type>asList(new Uint256(exchangeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String sender, String recipient, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new Address(sender),
                new Address(recipient),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function(FUNC_DECIMALS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> cap() {
        final Function function = new Function(FUNC_CAP,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setJustice(String oneJustice) {
        final Function function = new Function(
                FUNC_SETJUSTICE,
                Arrays.<Type>asList(new Utf8String(oneJustice)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isInitialized() {
        final Function function = new Function(FUNC_ISINITIALIZED,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> increaseAllowance(String spender, BigInteger addedValue) {
        final Function function = new Function(
                FUNC_INCREASEALLOWANCE,
                Arrays.<Type>asList(new Address(spender),
                new Uint256(addedValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> exchangeState(BigInteger exchangeId) {
        final Function function = new Function(FUNC_EXCHANGESTATE,
                Arrays.<Type>asList(new Uint256(exchangeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> commitExchange(BigInteger exchangeId) {
        final Function function = new Function(
                FUNC_COMMITEXCHANGE,
                Arrays.<Type>asList(new Uint256(exchangeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(String account, BigInteger value) {
        final Function function = new Function(
                FUNC_MINT,
                Arrays.<Type>asList(new Address(account),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(String name, String symbol, String minterAddress, BigInteger cap, BigInteger initialSupply, String proof) {
        final Function function = new Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Address(minterAddress),
                new Uint256(cap),
                new Uint256(initialSupply),
                new Utf8String(proof)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String account) {
        final Function function = new Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> rollbackExchange(BigInteger exchangeId) {
        final Function function = new Function(
                FUNC_ROLLBACKEXCHANGE,
                Arrays.<Type>asList(new Uint256(exchangeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> decreaseAllowance(String spender, BigInteger subtractedValue) {
        final Function function = new Function(
                FUNC_DECREASEALLOWANCE,
                Arrays.<Type>asList(new Address(spender),
                new Uint256(subtractedValue)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transfer(String recipient, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER,
                Arrays.<Type>asList(new Address(recipient),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> isMinter(String account) {
        final Function function = new Function(FUNC_ISMINTER,
                Arrays.<Type>asList(new Address(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> verifyFreezeExchange(BigInteger exchangeId) {
        final Function function = new Function(FUNC_VERIFYFREEZEEXCHANGE,
                Arrays.<Type>asList(new Uint256(exchangeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<BigInteger> USAGE_FEE() {
        final Function function = new Function(FUNC_USAGE_FEE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String owner, String spender) {
        final Function function = new Function(FUNC_ALLOWANCE,
                Arrays.<Type>asList(new Address(owner),
                new Address(spender)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> BASE() {
        final Function function = new Function(FUNC_BASE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setJusticeInfo(BigInteger key, byte[] value) {
        final Function function = new Function(
                FUNC_SETJUSTICEINFO,
                Arrays.<Type>asList(new Uint256(key),
                new Bytes32(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> freezeExchange(String userAgency) {
        final Function function = new Function(
                FUNC_FREEZEEXCHANGE,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> proof() {
        final Function function = new Function(FUNC_PROOF,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<DataTokenTemplate> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, String name, String symbol, String minterAddress, BigInteger cap, BigInteger initialSupply, String proof) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Address(minterAddress),
                new Uint256(cap),
                new Uint256(initialSupply),
                new Utf8String(proof)));
        return deployRemoteCall(DataTokenTemplate.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DataTokenTemplate> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, String name, String symbol, String minterAddress, BigInteger cap, BigInteger initialSupply, String proof) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Utf8String(name),
                new Utf8String(symbol),
                new Address(minterAddress),
                new Uint256(cap),
                new Uint256(initialSupply),
                new Utf8String(proof)));
        return deployRemoteCall(DataTokenTemplate.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    public List<SetJusticeInfoEventResponse> getSetJusticeInfoEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETJUSTICEINFO_EVENT, transactionReceipt);
        ArrayList<SetJusticeInfoEventResponse> responses = new ArrayList<SetJusticeInfoEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SetJusticeInfoEventResponse typedResponse = new SetJusticeInfoEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetJusticeInfoEventResponse> setJusticeInfoEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, SetJusticeInfoEventResponse>() {
            @Override
            public SetJusticeInfoEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETJUSTICEINFO_EVENT, log);
                SetJusticeInfoEventResponse typedResponse = new SetJusticeInfoEventResponse();
                typedResponse.log = log;
                typedResponse.key = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SetJusticeInfoEventResponse> setJusticeInfoEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETJUSTICEINFO_EVENT));
        return setJusticeInfoEventObservable(filter);
    }

    public List<ExchangeFreezeEventResponse> getExchangeFreezeEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGEFREEZE_EVENT, transactionReceipt);
        ArrayList<ExchangeFreezeEventResponse> responses = new ArrayList<ExchangeFreezeEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExchangeFreezeEventResponse typedResponse = new ExchangeFreezeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ExchangeFreezeEventResponse> exchangeFreezeEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ExchangeFreezeEventResponse>() {
            @Override
            public ExchangeFreezeEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGEFREEZE_EVENT, log);
                ExchangeFreezeEventResponse typedResponse = new ExchangeFreezeEventResponse();
                typedResponse.log = log;
                typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ExchangeFreezeEventResponse> exchangeFreezeEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGEFREEZE_EVENT));
        return exchangeFreezeEventObservable(filter);
    }

    public List<ExchangeCommitEventResponse> getExchangeCommitEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGECOMMIT_EVENT, transactionReceipt);
        ArrayList<ExchangeCommitEventResponse> responses = new ArrayList<ExchangeCommitEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExchangeCommitEventResponse typedResponse = new ExchangeCommitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ExchangeCommitEventResponse> exchangeCommitEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ExchangeCommitEventResponse>() {
            @Override
            public ExchangeCommitEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGECOMMIT_EVENT, log);
                ExchangeCommitEventResponse typedResponse = new ExchangeCommitEventResponse();
                typedResponse.log = log;
                typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ExchangeCommitEventResponse> exchangeCommitEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGECOMMIT_EVENT));
        return exchangeCommitEventObservable(filter);
    }

    public List<ExchangeRollbackEventResponse> getExchangeRollbackEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGEROLLBACK_EVENT, transactionReceipt);
        ArrayList<ExchangeRollbackEventResponse> responses = new ArrayList<ExchangeRollbackEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExchangeRollbackEventResponse typedResponse = new ExchangeRollbackEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ExchangeRollbackEventResponse> exchangeRollbackEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ExchangeRollbackEventResponse>() {
            @Override
            public ExchangeRollbackEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGEROLLBACK_EVENT, log);
                ExchangeRollbackEventResponse typedResponse = new ExchangeRollbackEventResponse();
                typedResponse.log = log;
                typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ExchangeRollbackEventResponse> exchangeRollbackEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGEROLLBACK_EVENT));
        return exchangeRollbackEventObservable(filter);
    }

    public List<ExchangeSettleEventResponse> getExchangeSettleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGESETTLE_EVENT, transactionReceipt);
        ArrayList<ExchangeSettleEventResponse> responses = new ArrayList<ExchangeSettleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExchangeSettleEventResponse typedResponse = new ExchangeSettleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ExchangeSettleEventResponse> exchangeSettleEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ExchangeSettleEventResponse>() {
            @Override
            public ExchangeSettleEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGESETTLE_EVENT, log);
                ExchangeSettleEventResponse typedResponse = new ExchangeSettleEventResponse();
                typedResponse.log = log;
                typedResponse.exchangeId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.exchangeUser = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.exchangeUserAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ExchangeSettleEventResponse> exchangeSettleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGESETTLE_EVENT));
        return exchangeSettleEventObservable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventObservable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventObservable(filter);
    }

    public static DataTokenTemplate load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return new DataTokenTemplate(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DataTokenTemplate load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return new DataTokenTemplate(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class SetJusticeInfoEventResponse {
        public Log log;

        public BigInteger key;

        public byte[] value;
    }

    public static class ExchangeFreezeEventResponse {
        public Log log;

        public BigInteger exchangeId;

        public String exchangeUser;

        public String exchangeUserAgency;

        public BigInteger value;
    }

    public static class ExchangeCommitEventResponse {
        public Log log;

        public BigInteger exchangeId;

        public String exchangeUser;

        public String exchangeUserAgency;
    }

    public static class ExchangeRollbackEventResponse {
        public Log log;

        public BigInteger exchangeId;

        public String exchangeUser;

        public String exchangeUserAgency;
    }

    public static class ExchangeSettleEventResponse {
        public Log log;

        public BigInteger exchangeId;

        public String exchangeUser;

        public String exchangeUserAgency;

        public BigInteger value;
    }

    public static class TransferEventResponse {
        public Log log;

        public String from;

        public String to;

        public BigInteger value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String owner;

        public String spender;

        public BigInteger value;
    }
}

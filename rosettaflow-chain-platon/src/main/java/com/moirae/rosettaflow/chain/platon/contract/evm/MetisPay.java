package com.moirae.rosettaflow.chain.platon.contract.evm;

import com.platon.abi.solidity.EventEncoder;
import com.platon.abi.solidity.FunctionEncoder;
import com.platon.abi.solidity.TypeReference;
import com.platon.abi.solidity.datatypes.Address;
import com.platon.abi.solidity.datatypes.DynamicArray;
import com.platon.abi.solidity.datatypes.Event;
import com.platon.abi.solidity.datatypes.Function;
import com.platon.abi.solidity.datatypes.Type;
import com.platon.abi.solidity.datatypes.generated.Uint256;
import com.platon.crypto.Credentials;
import com.platon.protocol.Web3j;
import com.platon.protocol.core.DefaultBlockParameter;
import com.platon.protocol.core.RemoteCall;
import com.platon.protocol.core.methods.request.PlatonFilter;
import com.platon.protocol.core.methods.response.Log;
import com.platon.protocol.core.methods.response.TransactionReceipt;
import com.platon.tx.Contract;
import com.platon.tx.TransactionManager;
import com.platon.tx.gas.GasProvider;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/PlatONnetwork/client-sdk-java/releases">platon-web3j command line tools</a>,
 * or the com.platon.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/PlatONnetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.1.0.0.
 */
public class MetisPay extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_PREPAY = "prepay";

    public static final String FUNC_SETTLE = "settle";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_AUTHORIZE = "authorize";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_USAGE_FEE = "USAGE_FEE";

    public static final String FUNC_BASE = "BASE";

    public static final String FUNC_ADDWHITELIST = "addWhitelist";

    public static final String FUNC_DELETEWHITELIST = "deleteWhitelist";

    public static final Event PREPAYEVENT_EVENT = new Event("PrepayEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    public static final Event SETTLEEVENT_EVENT = new Event("SettleEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}));
    ;

    protected MetisPay(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected MetisPay(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> prepay(BigInteger taskId, String user, BigInteger fee, List<String> tokenAddressList) {
        final Function function = new Function(
                FUNC_PREPAY,
                Arrays.<Type>asList(new Uint256(taskId),
                new Address(user),
                new Uint256(fee),
                new DynamicArray<Address>(
                Address.class,
                        com.platon.abi.solidity.Utils.typeMap(tokenAddressList, Address.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> settle(BigInteger taskId, BigInteger fee) {
        final Function function = new Function(
                FUNC_SETTLE,
                Arrays.<Type>asList(new Uint256(taskId),
                new Uint256(fee)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> whitelist(String userAddress) {
        final Function function = new Function(FUNC_WHITELIST,
                Arrays.<Type>asList(new Address(userAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> authorize(String userAgency) {
        final Function function = new Function(
                FUNC_AUTHORIZE,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(String metisLat) {
        final Function function = new Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new Address(metisLat)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> USAGE_FEE() {
        final Function function = new Function(FUNC_USAGE_FEE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> BASE() {
        final Function function = new Function(FUNC_BASE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addWhitelist(String userAgency) {
        final Function function = new Function(
                FUNC_ADDWHITELIST,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteWhitelist(String userAgency) {
        final Function function = new Function(
                FUNC_DELETEWHITELIST,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<MetisPay> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider, String metisLat) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(metisLat)));
        return deployRemoteCall(MetisPay.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MetisPay> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider, String metisLat) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(metisLat)));
        return deployRemoteCall(MetisPay.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    public List<PrepayEventEventResponse> getPrepayEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PREPAYEVENT_EVENT, transactionReceipt);
        ArrayList<PrepayEventEventResponse> responses = new ArrayList<PrepayEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PrepayEventEventResponse typedResponse = new PrepayEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PrepayEventEventResponse> prepayEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, PrepayEventEventResponse>() {
            @Override
            public PrepayEventEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PREPAYEVENT_EVENT, log);
                PrepayEventEventResponse typedResponse = new PrepayEventEventResponse();
                typedResponse.log = log;
                typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<PrepayEventEventResponse> prepayEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PREPAYEVENT_EVENT));
        return prepayEventEventObservable(filter);
    }

    public List<SettleEventEventResponse> getSettleEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETTLEEVENT_EVENT, transactionReceipt);
        ArrayList<SettleEventEventResponse> responses = new ArrayList<SettleEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettleEventEventResponse typedResponse = new SettleEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.Agencyfee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.refund = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SettleEventEventResponse> settleEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, SettleEventEventResponse>() {
            @Override
            public SettleEventEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETTLEEVENT_EVENT, log);
                SettleEventEventResponse typedResponse = new SettleEventEventResponse();
                typedResponse.log = log;
                typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.Agencyfee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.refund = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SettleEventEventResponse> settleEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEEVENT_EVENT));
        return settleEventEventObservable(filter);
    }

    public static MetisPay load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return new MetisPay(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MetisPay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return new MetisPay(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class PrepayEventEventResponse {
        public Log log;

        public BigInteger taskId;

        public String user;

        public String userAgency;

        public BigInteger fee;

        public List<String> tokenAddressList;
    }

    public static class SettleEventEventResponse {
        public Log log;

        public BigInteger taskId;

        public String user;

        public String userAgency;

        public BigInteger Agencyfee;

        public BigInteger refund;

        public List<String> tokenAddressList;
    }
}

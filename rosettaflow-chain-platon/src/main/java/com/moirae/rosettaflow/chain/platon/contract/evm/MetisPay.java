package com.moirae.rosettaflow.chain.platon.contract.evm;

import com.platon.abi.solidity.EventEncoder;
import com.platon.abi.solidity.TypeReference;
import com.platon.abi.solidity.datatypes.*;
import com.platon.abi.solidity.datatypes.generated.Uint256;
import com.platon.crypto.Credentials;
import com.platon.protocol.Web3j;
import com.platon.protocol.core.DefaultBlockParameter;
import com.platon.protocol.core.RemoteCall;
import com.platon.protocol.core.methods.request.PlatonFilter;
import com.platon.protocol.core.methods.response.Log;
import com.platon.protocol.core.methods.response.TransactionReceipt;
import com.platon.tx.Contract;
import com.platon.tx.TransactionManager;
import com.platon.tx.gas.GasProvider;
import rx.Observable;
import rx.functions.Func1;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://github.com/PlatONnetwork/client-sdk-java/releases">platon-web3j command line tools</a>,
 * or the com.platon.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/PlatONnetwork/client-sdk-java/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.1.0.0.
 */
public class MetisPay extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50613ef0806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b6a5d7de11610066578063b6a5d7de1461015b578063c4d66de81461018b578063f2fde38b146101a7578063f80f5dd5146101c3578063ff68f6af146101f35761009e565b80630ef92166146100a3578063715018a6146100d35780638da5cb5b146100dd5780639a9c29f6146100fb5780639b19251a1461012b575b600080fd5b6100bd60048036038101906100b89190612df1565b610223565b6040516100ca9190612ebf565b60405180910390f35b6100db610c2f565b005b6100e5610cb7565b6040516100f29190612ee9565b60405180910390f35b61011560048036038101906101109190612f04565b610ce1565b6040516101229190612ebf565b60405180910390f35b61014560048036038101906101409190612f44565b611a03565b604051610152919061302f565b60405180910390f35b61017560048036038101906101709190612f44565b611b6f565b6040516101829190612ebf565b60405180910390f35b6101a560048036038101906101a09190612f44565b611b81565b005b6101c160048036038101906101bc9190612f44565b611ca7565b005b6101dd60048036038101906101d89190612f44565b611d9e565b6040516101ea9190612ebf565b60405180910390f35b61020d60048036038101906102089190612f44565b61211a565b60405161021a9190612ebf565b60405180910390f35b60008151835114610269576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610260906130ae565b60405180910390fd5b600080606780549050905060005b81811015610308578773ffffffffffffffffffffffffffffffffffffffff16606782815481106102aa576102a96130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036102f557600192505b80806103009061312c565b915050610277565b5081610349576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610340906130ae565b60405180910390fd5b60009150606660008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060005b81811015610463573373ffffffffffffffffffffffffffffffffffffffff16606660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610405576104046130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361045057600192505b808061045b9061312c565b915050610395565b50816104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b906131c0565b60405180910390fd5b60009150606980549050905060005b818110156104f85788606982815481106104d0576104cf6130ce565b5b9060005260206000200154036104e557600192505b80806104f09061312c565b9150506104b3565b50811561053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105319061322c565b60405180910390fd5b6000610569606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168930612792565b90508681116105ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a490613298565b60405180910390fd5b8551915060005b82811015610652576105e18782815181106105d2576105d16130ce565b5b60200260200101518a30612792565b91508581815181106105f6576105f56130ce565b5b6020026020010151821161063f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063690613304565b60405180910390fd5b808061064a9061312c565b9150506105b4565b50600060606000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168b308c6040516024016106a793929190613333565b6040516020818303038152906040527fb642fe57000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161073191906133e4565b6000604051808303816000865af19150503d806000811461076e576040519150601f19603f3d011682016040523d82523d6000602084013e610773565b606091505b508093508194505050826107bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b390613447565b60405180910390fd5b818060200190518101906107d09190613493565b905080610812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080990613532565b60405180910390fd5b60005b858110156109fb578981815181106108305761082f6130ce565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168c308b8481518110610863576108626130ce565b5b602002602001015160405160240161087d93929190613333565b6040516020818303038152906040527fb642fe57000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161090791906133e4565b6000604051808303816000865af19150503d8060008114610944576040519150601f19603f3d011682016040523d82523d6000602084013e610949565b606091505b50809450819550505083610992576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098990613447565b60405180910390fd5b828060200190518101906109a69190613493565b9150816109e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109df90613532565b60405180910390fd5b80806109f39061312c565b915050610815565b506040518060e001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018b81526020018a815260200189815260200160011515815260200160001515815250606860008e815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003019080519060200190610b289291906129f7565b506080820151816004019080519060200190610b45929190612a81565b5060a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555090505060698c90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff168d7f3a2d70b336733ffa4e257b7f871c733cc1cd2f1874bd1393a004e0ece7e3d55f8d8d8d604051610c1493929190613610565b60405180910390a46001965050505050505095945050505050565b610c376128f5565b73ffffffffffffffffffffffffffffffffffffffff16610c55610cb7565b73ffffffffffffffffffffffffffffffffffffffff1614610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca2906136a1565b60405180910390fd5b610cb560006128fd565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606980549050905060008060005b83811015610d3a578660698281548110610d0f57610d0e6130ce565b5b906000526020600020015403610d2757600192508091505b8080610d329061312c565b915050610cf2565b5081610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d729061370d565b60405180910390fd5b6068600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1690613779565b60405180910390fd5b6068600087815260200190815260200160002060050160009054906101000a900460ff16610e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e79906137e5565b60405180910390fd5b6068600087815260200190815260200160002060050160019054906101000a900460ff1615610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd90613851565b60405180910390fd5b84606860008881526020019081526020016000206002015411610f3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f35906138bd565b60405180910390fd5b60006060606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16606860008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688604051602401610fc49291906138dd565b6040516020818303038152906040527f9d61d234000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161104e91906133e4565b6000604051808303816000865af19150503d806000811461108b576040519150601f19603f3d011682016040523d82523d6000602084013e611090565b606091505b508092508193505050816110d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d090613952565b60405180910390fd5b808060200190518101906110ed9190613493565b61112c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611123906139e4565b60405180910390fd5b600087606860008b8152602001908152602001600020600201546111509190613a04565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16606860008b815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826040516024016111d49291906138dd565b6040516020818303038152906040527f9d61d234000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161125e91906133e4565b6000604051808303816000865af19150503d806000811461129b576040519150601f19603f3d011682016040523d82523d6000602084013e6112a0565b606091505b508093508194505050826112e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e090613952565b60405180910390fd5b818060200190518101906112fd9190613493565b61133c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611333906139e4565b60405180910390fd5b600080606860008c81526020019081526020016000206003018054806020026020016040519081016040528092919081815260200182805480156113d557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161138b575b505050505090506000606860008d815260200190815260200160002060040180548060200260200160405190810160405280929190818152602001828054801561143e57602002820191906000526020600020905b81548152602001906001019080831161142a575b5050505050905060008251905060005b8181101561179157838181518110611469576114686130ce565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f07546172000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161151791906133e4565b6000604051808303816000865af19150503d8060008114611554576040519150601f19603f3d011682016040523d82523d6000602084013e611559565b606091505b508098508199505050876115a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159990613a84565b60405180910390fd5b868060200190518101906115b69190613ae2565b94508381815181106115cb576115ca6130ce565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16858483815181106115fd576115fc6130ce565b5b60200260200101516040516024016116169291906138dd565b6040516020818303038152906040527f9d61d234000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516116a091906133e4565b6000604051808303816000865af19150503d80600081146116dd576040519150601f19603f3d011682016040523d82523d6000602084013e6116e2565b606091505b5080985081995050508761172b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172290613952565b60405180910390fd5b8680602001905181019061173f9190613493565b61177e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611775906139e4565b60405180910390fd5b80806117899061312c565b91505061144e565b50606860008e815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16606860008f815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168e7f44b417d35556b6916cd7103ec4c060340e7f5e59b2f886680558e1c6d6366ef48f8988886040516118629493929190613b0f565b60405180910390a460008890505b60018b61187d9190613a04565b8110156118e45760696001826118939190613b62565b815481106118a4576118a36130ce565b5b9060005260206000200154606982815481106118c3576118c26130ce565b5b906000526020600020018190555080806118dc9061312c565b915050611870565b50606960018b6118f49190613a04565b81548110611905576119046130ce565b5b9060005260206000200160009055606980548061192557611924613bb8565b5b60019003818190600052602060002001600090559055606860008e8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006119b59190612ace565b6004820160006119c59190612aef565b6005820160006101000a81549060ff02191690556005820160016101000a81549060ff0219169055505060019a505050505050505050505092915050565b60608060005b606780549050811015611b65578373ffffffffffffffffffffffffffffffffffffffff1660678281548110611a4157611a406130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b5257606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611b4657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611afc575b50505050509150611b65565b8080611b5d9061312c565b915050611a09565b5080915050919050565b6000611b7a82611d9e565b9050919050565b600060019054906101000a900460ff16611ba95760008054906101000a900460ff1615611bb2565b611bb16129c3565b5b611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890613c59565b60405180910390fd5b60008060019054906101000a900460ff161590508015611c41576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015611ca35760008060016101000a81548160ff0219169083151502179055505b5050565b611caf6128f5565b73ffffffffffffffffffffffffffffffffffffffff16611ccd610cb7565b73ffffffffffffffffffffffffffffffffffffffff1614611d23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1a906136a1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8990613ceb565b60405180910390fd5b611d9b816128fd565b50565b6000806000905060005b606780549050811015611e3e573373ffffffffffffffffffffffffffffffffffffffff1660678281548110611de057611ddf6130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611e2b57600191505b8080611e369061312c565b915050611da8565b50801561200c576000606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000805b82811015611f5e578573ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611f0057611eff6130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611f4b57600191505b8080611f569061312c565b915050611e90565b508061200557606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050612110565b6067339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6001915050919050565b60008060009050600080606780549050905060005b818110156121c3573373ffffffffffffffffffffffffffffffffffffffff1660678281548110612162576121616130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036121b057600193508092505b80806121bb9061312c565b91505061212f565b5082612204576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fb90613d57565b60405180910390fd5b6000806000606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060005b81811015612322578873ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106122c1576122c06130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361230f57600193508092505b808061231a9061312c565b915050612251565b5082612363576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235a90613dc3565b60405180910390fd5b60018111156125ce5760008290505b60018261237f9190613a04565b8110156124ba57606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001826123d29190613b62565b815481106123e3576123e26130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061245f5761245e6130ce565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806124b29061312c565b915050612372565b50606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001826125079190613a04565b81548110612518576125176130ce565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548061259457612593613bb8565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055612783565b60008590505b6001856125e19190613a04565b8110156126a25760676001826125f79190613b62565b81548110612608576126076130ce565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660678281548110612647576126466130ce565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061269a9061312c565b9150506125d4565b5060676001856126b29190613a04565b815481106126c3576126c26130ce565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055606780548061270257612701613bb8565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055606660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006127829190612ace565b5b60019650505050505050919050565b60008060008573ffffffffffffffffffffffffffffffffffffffff1685856040516024016127c1929190613de3565b6040516020818303038152906040527fdd62ed3e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161284b91906133e4565b600060405180830381855afa9150503d8060008114612886576040519150601f19603f3d011682016040523d82523d6000602084013e61288b565b606091505b5091509150816128d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c790613e58565b60405180910390fd5b6000818060200190518101906128e69190613e8d565b90508093505050509392505050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006129ce306129d4565b15905090565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054828255906000526020600020908101928215612a70579160200282015b82811115612a6f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612a17565b5b509050612a7d9190612b10565b5090565b828054828255906000526020600020908101928215612abd579160200282015b82811115612abc578251825591602001919060010190612aa1565b5b509050612aca9190612b10565b5090565b5080546000825590600052602060002090810190612aec9190612b10565b50565b5080546000825590600052602060002090810190612b0d9190612b10565b50565b5b80821115612b29576000816000905550600101612b11565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612b5481612b41565b8114612b5f57600080fd5b50565b600081359050612b7181612b4b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ba282612b77565b9050919050565b612bb281612b97565b8114612bbd57600080fd5b50565b600081359050612bcf81612ba9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c2382612bda565b810181811067ffffffffffffffff82111715612c4257612c41612beb565b5b80604052505050565b6000612c55612b2d565b9050612c618282612c1a565b919050565b600067ffffffffffffffff821115612c8157612c80612beb565b5b602082029050602081019050919050565b600080fd5b6000612caa612ca584612c66565b612c4b565b90508083825260208201905060208402830185811115612ccd57612ccc612c92565b5b835b81811015612cf65780612ce28882612bc0565b845260208401935050602081019050612ccf565b5050509392505050565b600082601f830112612d1557612d14612bd5565b5b8135612d25848260208601612c97565b91505092915050565b600067ffffffffffffffff821115612d4957612d48612beb565b5b602082029050602081019050919050565b6000612d6d612d6884612d2e565b612c4b565b90508083825260208201905060208402830185811115612d9057612d8f612c92565b5b835b81811015612db95780612da58882612b62565b845260208401935050602081019050612d92565b5050509392505050565b600082601f830112612dd857612dd7612bd5565b5b8135612de8848260208601612d5a565b91505092915050565b600080600080600060a08688031215612e0d57612e0c612b37565b5b6000612e1b88828901612b62565b9550506020612e2c88828901612bc0565b9450506040612e3d88828901612b62565b935050606086013567ffffffffffffffff811115612e5e57612e5d612b3c565b5b612e6a88828901612d00565b925050608086013567ffffffffffffffff811115612e8b57612e8a612b3c565b5b612e9788828901612dc3565b9150509295509295909350565b60008115159050919050565b612eb981612ea4565b82525050565b6000602082019050612ed46000830184612eb0565b92915050565b612ee381612b97565b82525050565b6000602082019050612efe6000830184612eda565b92915050565b60008060408385031215612f1b57612f1a612b37565b5b6000612f2985828601612b62565b9250506020612f3a85828601612b62565b9150509250929050565b600060208284031215612f5a57612f59612b37565b5b6000612f6884828501612bc0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612fa681612b97565b82525050565b6000612fb88383612f9d565b60208301905092915050565b6000602082019050919050565b6000612fdc82612f71565b612fe68185612f7c565b9350612ff183612f8d565b8060005b838110156130225781516130098882612fac565b975061301483612fc4565b925050600181019050612ff5565b5085935050505092915050565b600060208201905081810360008301526130498184612fd1565b905092915050565b600082825260208201905092915050565b7f7573657227732077686974656c69737420646f6573206e6f7420657869737400600082015250565b6000613098601f83613051565b91506130a382613062565b602082019050919050565b600060208201905081810360008301526130c78161308b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061313782612b41565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613169576131686130fd565b5b600182019050919050565b7f6167656e6379206973206e6f7420617574686f72697a65640000000000000000600082015250565b60006131aa601883613051565b91506131b582613174565b602082019050919050565b600060208201905081810360008301526131d98161319d565b9050919050565b7f7461736b20696420616c72656164792065786973747300000000000000000000600082015250565b6000613216601683613051565b9150613221826131e0565b602082019050919050565b6000602082019050818103600083015261324581613209565b9050919050565b7f776c617420696e73756666696369656e742062616c616e636500000000000000600082015250565b6000613282601983613051565b915061328d8261324c565b602082019050919050565b600060208201905081810360008301526132b181613275565b9050919050565b7f6461746120746f6b656e20696e73756666696369656e742062616c616e636500600082015250565b60006132ee601f83613051565b91506132f9826132b8565b602082019050919050565b6000602082019050818103600083015261331d816132e1565b9050919050565b61332d81612b41565b82525050565b60006060820190506133486000830186612eda565b6133556020830185612eda565b6133626040830184613324565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561339e578082015181840152602081019050613383565b838111156133ad576000848401525b50505050565b60006133be8261336a565b6133c88185613375565b93506133d8818560208601613380565b80840191505092915050565b60006133f082846133b3565b915081905092915050565b7f63616c6c207472616e7366657246726f6d206661696c65640000000000000000600082015250565b6000613431601883613051565b915061343c826133fb565b602082019050919050565b6000602082019050818103600083015261346081613424565b9050919050565b61347081612ea4565b811461347b57600080fd5b50565b60008151905061348d81613467565b92915050565b6000602082840312156134a9576134a8612b37565b5b60006134b78482850161347e565b91505092915050565b7f5468652072657475726e206f66207472616e7366657266726f6d20697320666160008201527f696c757265000000000000000000000000000000000000000000000000000000602082015250565b600061351c602583613051565b9150613527826134c0565b604082019050919050565b6000602082019050818103600083015261354b8161350f565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61358781612b41565b82525050565b6000613599838361357e565b60208301905092915050565b6000602082019050919050565b60006135bd82613552565b6135c7818561355d565b93506135d28361356e565b8060005b838110156136035781516135ea888261358d565b97506135f5836135a5565b9250506001810190506135d6565b5085935050505092915050565b60006060820190506136256000830186613324565b81810360208301526136378185612fd1565b9050818103604083015261364b81846135b2565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061368b602083613051565b915061369682613655565b602082019050919050565b600060208201905081810360008301526136ba8161367e565b9050919050565b7f696e76616c6964207461736b2069640000000000000000000000000000000000600082015250565b60006136f7600f83613051565b9150613702826136c1565b602082019050919050565b60006020820190508181036000830152613726816136ea565b9050919050565b7f4f6e6c792075736572206167656e742063616e20646f20746869730000000000600082015250565b6000613763601b83613051565b915061376e8261372d565b602082019050919050565b6000602082019050818103600083015261379281613756565b9050919050565b7f707265706179206e6f7420636f6d706c65746564000000000000000000000000600082015250565b60006137cf601483613051565b91506137da82613799565b602082019050919050565b600060208201905081810360008301526137fe816137c2565b9050919050565b7f52657065617420736574746c6500000000000000000000000000000000000000600082015250565b600061383b600d83613051565b915061384682613805565b602082019050919050565b6000602082019050818103600083015261386a8161382e565b9050919050565b7f6d6f7265207468616e2070726570616964206c61740000000000000000000000600082015250565b60006138a7601583613051565b91506138b282613871565b602082019050919050565b600060208201905081810360008301526138d68161389a565b9050919050565b60006040820190506138f26000830185612eda565b6138ff6020830184613324565b9392505050565b7f63616c6c207472616e73666572206661696c6564000000000000000000000000600082015250565b600061393c601483613051565b915061394782613906565b602082019050919050565b6000602082019050818103600083015261396b8161392f565b9050919050565b7f5468652072657475726e206f66207472616e73666572206973206661696c757260008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006139ce602183613051565b91506139d982613972565b604082019050919050565b600060208201905081810360008301526139fd816139c1565b9050919050565b6000613a0f82612b41565b9150613a1a83612b41565b925082821015613a2d57613a2c6130fd565b5b828203905092915050565b7f63616c6c206d696e746572206661696c65640000000000000000000000000000600082015250565b6000613a6e601283613051565b9150613a7982613a38565b602082019050919050565b60006020820190508181036000830152613a9d81613a61565b9050919050565b6000613aaf82612b77565b9050919050565b613abf81613aa4565b8114613aca57600080fd5b50565b600081519050613adc81613ab6565b92915050565b600060208284031215613af857613af7612b37565b5b6000613b0684828501613acd565b91505092915050565b6000608082019050613b246000830187613324565b613b316020830186613324565b8181036040830152613b438185612fd1565b90508181036060830152613b5781846135b2565b905095945050505050565b6000613b6d82612b41565b9150613b7883612b41565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613bad57613bac6130fd565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613c43602e83613051565b9150613c4e82613be7565b604082019050919050565b60006020820190508181036000830152613c7281613c36565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613cd5602683613051565b9150613ce082613c79565b604082019050919050565b60006020820190508181036000830152613d0481613cc8565b9050919050565b7f696e76616c696420757365720000000000000000000000000000000000000000600082015250565b6000613d41600c83613051565b9150613d4c82613d0b565b602082019050919050565b60006020820190508181036000830152613d7081613d34565b9050919050565b7f696e76616c6964206167656e6379000000000000000000000000000000000000600082015250565b6000613dad600e83613051565b9150613db882613d77565b602082019050919050565b60006020820190508181036000830152613ddc81613da0565b9050919050565b6000604082019050613df86000830185612eda565b613e056020830184612eda565b9392505050565b7f73746174696363616c6c20616c6c6f77616e6365206661696c65640000000000600082015250565b6000613e42601b83613051565b9150613e4d82613e0c565b602082019050919050565b60006020820190508181036000830152613e7181613e35565b9050919050565b600081519050613e8781612b4b565b92915050565b600060208284031215613ea357613ea2612b37565b5b6000613eb184828501613e78565b9150509291505056fea26469706673582212205625c2ff7ffe0b4ad1929b89ffd61e405b6b35bf58e8e37c690da4ee254db71c64736f6c634300080d0033\n";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_AUTHORIZE = "authorize";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_ADDWHITELIST = "addWhitelist";

    public static final String FUNC_DELETEWHITELIST = "deleteWhitelist";

    public static final String FUNC_PREPAY = "prepay";

    public static final String FUNC_SETTLE = "settle";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PREPAYEVENT_EVENT = new Event("PrepayEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event SETTLEEVENT_EVENT = new Event("SettleEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    protected MetisPay(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected MetisPay(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<OwnershipTransferredEventResponse> ownershipTransferredEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventObservable(filter);
    }

    public List<PrepayEventEventResponse> getPrepayEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(PREPAYEVENT_EVENT, transactionReceipt);
        ArrayList<PrepayEventEventResponse> responses = new ArrayList<PrepayEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            PrepayEventEventResponse typedResponse = new PrepayEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenValueList = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<PrepayEventEventResponse> prepayEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, PrepayEventEventResponse>() {
            @Override
            public PrepayEventEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(PREPAYEVENT_EVENT, log);
                PrepayEventEventResponse typedResponse = new PrepayEventEventResponse();
                typedResponse.log = log;
                typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.fee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenValueList = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<PrepayEventEventResponse> prepayEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PREPAYEVENT_EVENT));
        return prepayEventEventObservable(filter);
    }

    public List<SettleEventEventResponse> getSettleEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SETTLEEVENT_EVENT, transactionReceipt);
        ArrayList<SettleEventEventResponse> responses = new ArrayList<SettleEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SettleEventEventResponse typedResponse = new SettleEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.Agencyfee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.refund = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.tokenValueList = (List<BigInteger>) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SettleEventEventResponse> settleEventEventObservable(PlatonFilter filter) {
        return web3j.platonLogObservable(filter).map(new Func1<Log, SettleEventEventResponse>() {
            @Override
            public SettleEventEventResponse call(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SETTLEEVENT_EVENT, log);
                SettleEventEventResponse typedResponse = new SettleEventEventResponse();
                typedResponse.log = log;
                typedResponse.taskId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.userAgency = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.Agencyfee = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.refund = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenAddressList = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.tokenValueList = (List<BigInteger>) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Observable<SettleEventEventResponse> settleEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        PlatonFilter filter = new PlatonFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETTLEEVENT_EVENT));
        return settleEventEventObservable(filter);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initialize(String metisLat) {
        final Function function = new Function(
                FUNC_INITIALIZE,
                Arrays.<Type>asList(new Address(metisLat)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> authorize(String userAgency) {
        final Function function = new Function(
                FUNC_AUTHORIZE,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<List> whitelist(String userAddress) {
        final Function function = new Function(FUNC_WHITELIST,
                Arrays.<Type>asList(new Address(userAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addWhitelist(String userAgency) {
        final Function function = new Function(
                FUNC_ADDWHITELIST,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteWhitelist(String userAgency) {
        final Function function = new Function(
                FUNC_DELETEWHITELIST,
                Arrays.<Type>asList(new Address(userAgency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> prepay(BigInteger taskId, String user, BigInteger fee, List<String> tokenAddressList, List<BigInteger> tokenValueList) {
        final Function function = new Function(
                FUNC_PREPAY,
                Arrays.<Type>asList(new Uint256(taskId),
                new Address(user),
                new Uint256(fee),
                new DynamicArray<Address>(
                Address.class,
                        com.platon.abi.solidity.Utils.typeMap(tokenAddressList, Address.class)),
                new DynamicArray<Uint256>(
                Uint256.class,
                        com.platon.abi.solidity.Utils.typeMap(tokenValueList, Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> settle(BigInteger taskId, BigInteger fee) {
        final Function function = new Function(
                FUNC_SETTLE,
                Arrays.<Type>asList(new Uint256(taskId),
                new Uint256(fee)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<MetisPay> deploy(Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return deployRemoteCall(MetisPay.class, web3j, credentials, contractGasProvider, BINARY,  "");
    }

    public static RemoteCall<MetisPay> deploy(Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return deployRemoteCall(MetisPay.class, web3j, transactionManager, contractGasProvider, BINARY,  "");
    }

    public static MetisPay load(String contractAddress, Web3j web3j, Credentials credentials, GasProvider contractGasProvider) {
        return new MetisPay(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MetisPay load(String contractAddress, Web3j web3j, TransactionManager transactionManager, GasProvider contractGasProvider) {
        return new MetisPay(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public String previousOwner;

        public String newOwner;
    }

    public static class PrepayEventEventResponse {
        public Log log;

        public BigInteger taskId;

        public String user;

        public String userAgency;

        public BigInteger fee;

        public List<String> tokenAddressList;

        public List<BigInteger> tokenValueList;
    }

    public static class SettleEventEventResponse {
        public Log log;

        public BigInteger taskId;

        public String user;

        public String userAgency;

        public BigInteger Agencyfee;

        public BigInteger refund;

        public List<String> tokenAddressList;

        public List<BigInteger> tokenValueList;
    }
}
